<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc/service_config/service_config.proto

namespace Grpc\Service_config\ServiceConfig;

use UnexpectedValueException;

/**
 * Load balancing policy.
 * Note that load_balancing_policy is deprecated in favor of
 * load_balancing_config; the former will be used only if the latter
 * is unset.
 * If no LB policy is configured here, then the default is pick_first.
 * If the policy name is set via the client API, that value overrides
 * the value specified here.
 * If the deprecated load_balancing_policy field is used, note that if the
 * resolver returns at least one balancer address (as opposed to backend
 * addresses), gRPC will use grpclb (see
 * https://github.com/grpc/grpc/blob/master/doc/load-balancing.md),
 * regardless of what policy is configured here.  However, if the resolver
 * returns at least one backend address in addition to the balancer
 * address(es), the client may fall back to the requested policy if it
 * is unable to reach any of the grpclb load balancers.
 *
 * Protobuf type <code>grpc.service_config.ServiceConfig.LoadBalancingPolicy</code>
 */
class LoadBalancingPolicy
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>ROUND_ROBIN = 1;</code>
     */
    const ROUND_ROBIN = 1;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::ROUND_ROBIN => 'ROUND_ROBIN',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(LoadBalancingPolicy::class, \Grpc\Service_config\ServiceConfig_LoadBalancingPolicy::class);

