<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc/service_config/service_config.proto

namespace Grpc\Service_config;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration for eds LB policy.
 *
 * Generated from protobuf message <code>grpc.service_config.EdsLoadBalancingPolicyConfig</code>
 */
class EdsLoadBalancingPolicyConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Cluster name.  Required.
     *
     * Generated from protobuf field <code>string cluster = 1;</code>
     */
    protected $cluster = '';
    /**
     * EDS service name, as returned in CDS.
     * May be unset if not specified in CDS.
     *
     * Generated from protobuf field <code>string eds_service_name = 2;</code>
     */
    protected $eds_service_name = '';
    /**
     * Server to send load reports to.
     * If unset, no load reporting is done.
     * If set to empty string, load reporting will be sent to the same
     * server as we are getting xds data from.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue lrs_load_reporting_server_name = 3;</code>
     */
    protected $lrs_load_reporting_server_name = null;
    /**
     * Locality-picking policy.
     * This policy's config is expected to be in the format used
     * by the weighted_target policy.  Note that the config should include
     * an empty value for the "targets" field; that empty value will be
     * replaced by one that is dynamically generated based on the EDS data.
     * Optional; defaults to "weighted_target".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig locality_picking_policy = 4;</code>
     */
    private $locality_picking_policy;
    /**
     * Endpoint-picking policy.
     * This will be configured as the policy for each child in the
     * locality-policy's config.
     * Optional; defaults to "round_robin".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig endpoint_picking_policy = 5;</code>
     */
    private $endpoint_picking_policy;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $cluster
     *           Cluster name.  Required.
     *     @type string $eds_service_name
     *           EDS service name, as returned in CDS.
     *           May be unset if not specified in CDS.
     *     @type \Google\Protobuf\StringValue $lrs_load_reporting_server_name
     *           Server to send load reports to.
     *           If unset, no load reporting is done.
     *           If set to empty string, load reporting will be sent to the same
     *           server as we are getting xds data from.
     *     @type \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $locality_picking_policy
     *           Locality-picking policy.
     *           This policy's config is expected to be in the format used
     *           by the weighted_target policy.  Note that the config should include
     *           an empty value for the "targets" field; that empty value will be
     *           replaced by one that is dynamically generated based on the EDS data.
     *           Optional; defaults to "weighted_target".
     *     @type \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $endpoint_picking_policy
     *           Endpoint-picking policy.
     *           This will be configured as the policy for each child in the
     *           locality-policy's config.
     *           Optional; defaults to "round_robin".
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Grpc\ServiceConfig\ServiceConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Cluster name.  Required.
     *
     * Generated from protobuf field <code>string cluster = 1;</code>
     * @return string
     */
    public function getCluster()
    {
        return $this->cluster;
    }

    /**
     * Cluster name.  Required.
     *
     * Generated from protobuf field <code>string cluster = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setCluster($var)
    {
        GPBUtil::checkString($var, True);
        $this->cluster = $var;

        return $this;
    }

    /**
     * EDS service name, as returned in CDS.
     * May be unset if not specified in CDS.
     *
     * Generated from protobuf field <code>string eds_service_name = 2;</code>
     * @return string
     */
    public function getEdsServiceName()
    {
        return $this->eds_service_name;
    }

    /**
     * EDS service name, as returned in CDS.
     * May be unset if not specified in CDS.
     *
     * Generated from protobuf field <code>string eds_service_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setEdsServiceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->eds_service_name = $var;

        return $this;
    }

    /**
     * Server to send load reports to.
     * If unset, no load reporting is done.
     * If set to empty string, load reporting will be sent to the same
     * server as we are getting xds data from.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue lrs_load_reporting_server_name = 3;</code>
     * @return \Google\Protobuf\StringValue
     */
    public function getLrsLoadReportingServerName()
    {
        return isset($this->lrs_load_reporting_server_name) ? $this->lrs_load_reporting_server_name : null;
    }

    public function hasLrsLoadReportingServerName()
    {
        return isset($this->lrs_load_reporting_server_name);
    }

    public function clearLrsLoadReportingServerName()
    {
        unset($this->lrs_load_reporting_server_name);
    }

    /**
     * Returns the unboxed value from <code>getLrsLoadReportingServerName()</code>

     * Server to send load reports to.
     * If unset, no load reporting is done.
     * If set to empty string, load reporting will be sent to the same
     * server as we are getting xds data from.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue lrs_load_reporting_server_name = 3;</code>
     * @return string|null
     */
    public function getLrsLoadReportingServerNameUnwrapped()
    {
        return $this->readWrapperValue("lrs_load_reporting_server_name");
    }

    /**
     * Server to send load reports to.
     * If unset, no load reporting is done.
     * If set to empty string, load reporting will be sent to the same
     * server as we are getting xds data from.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue lrs_load_reporting_server_name = 3;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setLrsLoadReportingServerName($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->lrs_load_reporting_server_name = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     * Server to send load reports to.
     * If unset, no load reporting is done.
     * If set to empty string, load reporting will be sent to the same
     * server as we are getting xds data from.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue lrs_load_reporting_server_name = 3;</code>
     * @param string|null $var
     * @return $this
     */
    public function setLrsLoadReportingServerNameUnwrapped($var)
    {
        $this->writeWrapperValue("lrs_load_reporting_server_name", $var);
        return $this;}

    /**
     * Locality-picking policy.
     * This policy's config is expected to be in the format used
     * by the weighted_target policy.  Note that the config should include
     * an empty value for the "targets" field; that empty value will be
     * replaced by one that is dynamically generated based on the EDS data.
     * Optional; defaults to "weighted_target".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig locality_picking_policy = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLocalityPickingPolicy()
    {
        return $this->locality_picking_policy;
    }

    /**
     * Locality-picking policy.
     * This policy's config is expected to be in the format used
     * by the weighted_target policy.  Note that the config should include
     * an empty value for the "targets" field; that empty value will be
     * replaced by one that is dynamically generated based on the EDS data.
     * Optional; defaults to "weighted_target".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig locality_picking_policy = 4;</code>
     * @param \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLocalityPickingPolicy($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Service_config\LoadBalancingConfig::class);
        $this->locality_picking_policy = $arr;

        return $this;
    }

    /**
     * Endpoint-picking policy.
     * This will be configured as the policy for each child in the
     * locality-policy's config.
     * Optional; defaults to "round_robin".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig endpoint_picking_policy = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getEndpointPickingPolicy()
    {
        return $this->endpoint_picking_policy;
    }

    /**
     * Endpoint-picking policy.
     * This will be configured as the policy for each child in the
     * locality-policy's config.
     * Optional; defaults to "round_robin".
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig endpoint_picking_policy = 5;</code>
     * @param \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setEndpointPickingPolicy($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Service_config\LoadBalancingConfig::class);
        $this->endpoint_picking_policy = $arr;

        return $this;
    }

}

