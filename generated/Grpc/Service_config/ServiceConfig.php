<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc/service_config/service_config.proto

namespace Grpc\Service_config;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A ServiceConfig represents information about a service but is not specific to
 * any name resolver.
 *
 * Generated from protobuf message <code>grpc.service_config.ServiceConfig</code>
 */
class ServiceConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.LoadBalancingPolicy load_balancing_policy = 1 [deprecated = true];</code>
     */
    protected $load_balancing_policy = 0;
    /**
     * Multiple LB policies can be specified; clients will iterate through
     * the list in order and stop at the first policy that they support. If none
     * are supported, the service config is considered invalid.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig load_balancing_config = 4;</code>
     */
    private $load_balancing_config;
    /**
     * Per-method configuration.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.MethodConfig method_config = 2;</code>
     */
    private $method_config;
    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.RetryThrottlingPolicy retry_throttling = 3;</code>
     */
    protected $retry_throttling = null;
    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.HealthCheckConfig health_check_config = 5;</code>
     */
    protected $health_check_config = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $load_balancing_policy
     *     @type \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $load_balancing_config
     *           Multiple LB policies can be specified; clients will iterate through
     *           the list in order and stop at the first policy that they support. If none
     *           are supported, the service config is considered invalid.
     *     @type \Grpc\Service_config\MethodConfig[]|\Google\Protobuf\Internal\RepeatedField $method_config
     *           Per-method configuration.
     *     @type \Grpc\Service_config\ServiceConfig\RetryThrottlingPolicy $retry_throttling
     *     @type \Grpc\Service_config\ServiceConfig\HealthCheckConfig $health_check_config
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Grpc\ServiceConfig\ServiceConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.LoadBalancingPolicy load_balancing_policy = 1 [deprecated = true];</code>
     * @return int
     */
    public function getLoadBalancingPolicy()
    {
        return $this->load_balancing_policy;
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.LoadBalancingPolicy load_balancing_policy = 1 [deprecated = true];</code>
     * @param int $var
     * @return $this
     */
    public function setLoadBalancingPolicy($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Service_config\ServiceConfig\LoadBalancingPolicy::class);
        $this->load_balancing_policy = $var;

        return $this;
    }

    /**
     * Multiple LB policies can be specified; clients will iterate through
     * the list in order and stop at the first policy that they support. If none
     * are supported, the service config is considered invalid.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig load_balancing_config = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getLoadBalancingConfig()
    {
        return $this->load_balancing_config;
    }

    /**
     * Multiple LB policies can be specified; clients will iterate through
     * the list in order and stop at the first policy that they support. If none
     * are supported, the service config is considered invalid.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.LoadBalancingConfig load_balancing_config = 4;</code>
     * @param \Grpc\Service_config\LoadBalancingConfig[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setLoadBalancingConfig($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Service_config\LoadBalancingConfig::class);
        $this->load_balancing_config = $arr;

        return $this;
    }

    /**
     * Per-method configuration.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.MethodConfig method_config = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMethodConfig()
    {
        return $this->method_config;
    }

    /**
     * Per-method configuration.
     *
     * Generated from protobuf field <code>repeated .grpc.service_config.MethodConfig method_config = 2;</code>
     * @param \Grpc\Service_config\MethodConfig[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMethodConfig($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Service_config\MethodConfig::class);
        $this->method_config = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.RetryThrottlingPolicy retry_throttling = 3;</code>
     * @return \Grpc\Service_config\ServiceConfig\RetryThrottlingPolicy
     */
    public function getRetryThrottling()
    {
        return isset($this->retry_throttling) ? $this->retry_throttling : null;
    }

    public function hasRetryThrottling()
    {
        return isset($this->retry_throttling);
    }

    public function clearRetryThrottling()
    {
        unset($this->retry_throttling);
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.RetryThrottlingPolicy retry_throttling = 3;</code>
     * @param \Grpc\Service_config\ServiceConfig\RetryThrottlingPolicy $var
     * @return $this
     */
    public function setRetryThrottling($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Service_config\ServiceConfig\RetryThrottlingPolicy::class);
        $this->retry_throttling = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.HealthCheckConfig health_check_config = 5;</code>
     * @return \Grpc\Service_config\ServiceConfig\HealthCheckConfig
     */
    public function getHealthCheckConfig()
    {
        return isset($this->health_check_config) ? $this->health_check_config : null;
    }

    public function hasHealthCheckConfig()
    {
        return isset($this->health_check_config);
    }

    public function clearHealthCheckConfig()
    {
        unset($this->health_check_config);
    }

    /**
     * Generated from protobuf field <code>.grpc.service_config.ServiceConfig.HealthCheckConfig health_check_config = 5;</code>
     * @param \Grpc\Service_config\ServiceConfig\HealthCheckConfig $var
     * @return $this
     */
    public function setHealthCheckConfig($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Service_config\ServiceConfig\HealthCheckConfig::class);
        $this->health_check_config = $var;

        return $this;
    }

}

