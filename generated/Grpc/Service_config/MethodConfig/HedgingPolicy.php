<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grpc/service_config/service_config.proto

namespace Grpc\Service_config\MethodConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The hedging policy for outgoing RPCs. Hedged RPCs may execute more than
 * once on the server, so only idempotent methods should specify a hedging
 * policy.
 *
 * Generated from protobuf message <code>grpc.service_config.MethodConfig.HedgingPolicy</code>
 */
class HedgingPolicy extends \Google\Protobuf\Internal\Message
{
    /**
     * The hedging policy will send up to max_requests RPCs.
     * This number represents the total number of all attempts, including
     * the original attempt.
     * This field is required and must be greater than 1.
     * Any value greater than 5 will be treated as if it were 5.
     *
     * Generated from protobuf field <code>uint32 max_attempts = 1;</code>
     */
    protected $max_attempts = 0;
    /**
     * The first RPC will be sent immediately, but the max_requests-1 subsequent
     * hedged RPCs will be sent at intervals of every hedging_delay. Set this
     * to 0 to immediately send all max_requests RPCs.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration hedging_delay = 2;</code>
     */
    protected $hedging_delay = null;
    /**
     * The set of status codes which indicate other hedged RPCs may still
     * succeed. If a non-fatal status code is returned by the server, hedged
     * RPCs will continue. Otherwise, outstanding requests will be canceled and
     * the error returned to the client application layer.
     * This field is optional.
     *
     * Generated from protobuf field <code>repeated .google.rpc.Code non_fatal_status_codes = 3;</code>
     */
    private $non_fatal_status_codes;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $max_attempts
     *           The hedging policy will send up to max_requests RPCs.
     *           This number represents the total number of all attempts, including
     *           the original attempt.
     *           This field is required and must be greater than 1.
     *           Any value greater than 5 will be treated as if it were 5.
     *     @type \Google\Protobuf\Duration $hedging_delay
     *           The first RPC will be sent immediately, but the max_requests-1 subsequent
     *           hedged RPCs will be sent at intervals of every hedging_delay. Set this
     *           to 0 to immediately send all max_requests RPCs.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $non_fatal_status_codes
     *           The set of status codes which indicate other hedged RPCs may still
     *           succeed. If a non-fatal status code is returned by the server, hedged
     *           RPCs will continue. Otherwise, outstanding requests will be canceled and
     *           the error returned to the client application layer.
     *           This field is optional.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Grpc\ServiceConfig\ServiceConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * The hedging policy will send up to max_requests RPCs.
     * This number represents the total number of all attempts, including
     * the original attempt.
     * This field is required and must be greater than 1.
     * Any value greater than 5 will be treated as if it were 5.
     *
     * Generated from protobuf field <code>uint32 max_attempts = 1;</code>
     * @return int
     */
    public function getMaxAttempts()
    {
        return $this->max_attempts;
    }

    /**
     * The hedging policy will send up to max_requests RPCs.
     * This number represents the total number of all attempts, including
     * the original attempt.
     * This field is required and must be greater than 1.
     * Any value greater than 5 will be treated as if it were 5.
     *
     * Generated from protobuf field <code>uint32 max_attempts = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxAttempts($var)
    {
        GPBUtil::checkUint32($var);
        $this->max_attempts = $var;

        return $this;
    }

    /**
     * The first RPC will be sent immediately, but the max_requests-1 subsequent
     * hedged RPCs will be sent at intervals of every hedging_delay. Set this
     * to 0 to immediately send all max_requests RPCs.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration hedging_delay = 2;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getHedgingDelay()
    {
        return isset($this->hedging_delay) ? $this->hedging_delay : null;
    }

    public function hasHedgingDelay()
    {
        return isset($this->hedging_delay);
    }

    public function clearHedgingDelay()
    {
        unset($this->hedging_delay);
    }

    /**
     * The first RPC will be sent immediately, but the max_requests-1 subsequent
     * hedged RPCs will be sent at intervals of every hedging_delay. Set this
     * to 0 to immediately send all max_requests RPCs.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration hedging_delay = 2;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setHedgingDelay($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->hedging_delay = $var;

        return $this;
    }

    /**
     * The set of status codes which indicate other hedged RPCs may still
     * succeed. If a non-fatal status code is returned by the server, hedged
     * RPCs will continue. Otherwise, outstanding requests will be canceled and
     * the error returned to the client application layer.
     * This field is optional.
     *
     * Generated from protobuf field <code>repeated .google.rpc.Code non_fatal_status_codes = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getNonFatalStatusCodes()
    {
        return $this->non_fatal_status_codes;
    }

    /**
     * The set of status codes which indicate other hedged RPCs may still
     * succeed. If a non-fatal status code is returned by the server, hedged
     * RPCs will continue. Otherwise, outstanding requests will be canceled and
     * the error returned to the client application layer.
     * This field is optional.
     *
     * Generated from protobuf field <code>repeated .google.rpc.Code non_fatal_status_codes = 3;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setNonFatalStatusCodes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \Google\Rpc\Code::class);
        $this->non_fatal_status_codes = $arr;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(HedgingPolicy::class, \Grpc\Service_config\MethodConfig_HedgingPolicy::class);

