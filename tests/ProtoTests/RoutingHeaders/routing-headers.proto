syntax = "proto3";

package testing.routingheaders;

option php_namespace = "Testing\\RoutingHeaders";

import "google/api/annotations.proto";
import "google/api/client.proto";

service RoutingHeaders {
  option (google.api.default_host) = "routingheaders.example.com";

  rpc GetMethod(SimpleRequest) returns(Response) { option (google.api.http).get = "/{name=items/*}/child"; };
  rpc PostMethod(SimpleRequest) returns(Response) { option (google.api.http).post = "/{name=items/*}/child"; };
  rpc PutMethod(SimpleRequest) returns(Response) { option (google.api.http).put = "/{name=items/*}/child"; };
  rpc PatchMethod(SimpleRequest) returns(Response) { option (google.api.http).patch = "/{name=items/*}/child"; };
  rpc DeleteMethod(SimpleRequest) returns(Response) { option (google.api.http).delete = "/{name=items/*}/child"; };

  rpc GetNoTemplateMethod(SimpleRequest) returns(Response) { option (google.api.http).get = "/{name}/child"; };

  rpc GetNoPlaceholdersMethod(SimpleRequest) returns(Response) { option (google.api.http).get = "/root/child"; };

  rpc NestedMethod(NestedRequest) returns(Response) {
    option (google.api.http).get = "/{nest1.nest2.name=items/*}/child";
  };

  rpc NestedMultiMethod(NestedRequest) returns(Response) {
    // Test multiple and nested routing headers.
    // PHP orders alphabetical by field-name; test that here.
    option (google.api.http).get = "/{nest1.nest2.name=items/*}/child1/{name=items/*}/child2/{another_name=more_items/*/and_more/*}/child3";
  };
}

message SimpleRequest {
  string name = 1;
}

message NestedRequest {
  message Inner1 {
    message Inner2 {
      string name = 1;
    }
    Inner2 nest2 = 1;
  }
  Inner1 nest1 = 1;
  string name = 2;
  string another_name = 3;
}

message Response {
}
