<?php
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/tests/Unit/ProtoTests/BasicDiregapic/library_rest.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Testing\BasicDiregapic\Gapic;

use Google\ApiCore\ApiException;

use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;

use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Operation;
use Google\Protobuf\Any;
use Google\Protobuf\BoolValue;
use Google\Protobuf\BytesValue;
use Google\Protobuf\DoubleValue;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\FloatValue;
use Google\Protobuf\Int32Value;
use Google\Protobuf\Int64Value;
use Google\Protobuf\ListValue;
use Google\Protobuf\StringValue;
use Google\Protobuf\Struct;
use Google\Protobuf\Timestamp;
use Google\Protobuf\UInt32Value;
use Google\Protobuf\UInt64Value;
use Google\Protobuf\Value;

use Testing\BasicDiregapic\AddCommentsRequest;
use Testing\BasicDiregapic\AddTagRequest;

use Testing\BasicDiregapic\ArchiveBooksRequest;
use Testing\BasicDiregapic\BookResponse;
use Testing\BasicDiregapic\Comment;
use Testing\BasicDiregapic\CreateBookRequest;
use Testing\BasicDiregapic\CreateInventoryRequest;
use Testing\BasicDiregapic\CreateShelfRequest;
use Testing\BasicDiregapic\DeleteBookRequest;
use Testing\BasicDiregapic\DeleteShelfRequest;
use Testing\BasicDiregapic\FindRelatedBooksRequest;
use Testing\BasicDiregapic\GetBookFromAbsolutelyAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromArchiveRequest;
use Testing\BasicDiregapic\GetBookRequest;

use Testing\BasicDiregapic\GetShelfRequest;
use Testing\BasicDiregapic\InventoryResponse;
use Testing\BasicDiregapic\ListAggregatedShelvesRequest;
use Testing\BasicDiregapic\ListBooksRequest;
use Testing\BasicDiregapic\ListShelvesRequest;
use Testing\BasicDiregapic\ListStringsRequest;
use Testing\BasicDiregapic\MergeShelvesRequest;
use Testing\BasicDiregapic\MoveBookRequest;
use Testing\BasicDiregapic\MoveBooksRequest;
use Testing\BasicDiregapic\PublishSeriesRequest;
use Testing\BasicDiregapic\SeriesUuidResponse;
use Testing\BasicDiregapic\ShelfResponse;
use Testing\BasicDiregapic\SomeMessage;
use Testing\BasicDiregapic\StringBuilder;
use Testing\BasicDiregapic\UpdateBookIndexRequest;
use Testing\BasicDiregapic\UpdateBookRequest;
use Testing\BasicDiregapic\Used;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and BookResponse resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of
 * [ShelfResponse][google.example.library.v1.ShelfResponse]
 * resources, named ``bookShelves/*``
 *
 * - Each ShelfResponse has a collection of
 * [BookResponse][google.example.library.v1.BookResponse]
 * resources, named `bookShelves/&#42;/books/*`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'&#64;.
 *
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $libraryServiceClient = new LibraryServiceClient();
 * try {
 *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
 *     $comments = [];
 *     $libraryServiceClient->addComments($formattedName, $comments);
 * } finally {
 *     $libraryServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this package includes resource name builder classes for
 * each reource type with formatting methods for requests, and parsing methods for
 * extracting resource ID segments.
 */
class LibraryServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.example.library.v1.LibraryService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com:1234';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/library_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/library_service_descriptor_config.php',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
                'useJwtAccessWithScope' => false,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/library_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Implements GapicClientTrait::defaultTransport.
     */
    private static function defaultTransport()
    {
        return 'rest';
    }

    /**
     * Implements GapicClientTrait::getSupportedTransports.
     */
    private static function getSupportedTransports()
    {
        return [
            'rest',
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'library-example.googleapis.com:1234:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, supports only
     *           `rest`. *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /**
     * Adds comments to a book
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $comments = [];
     *     $libraryServiceClient->addComments($formattedName, $comments);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string    $name
     * @param Comment[] $comments
     * @param array     $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function addComments($name, $comments, array $optionalArgs = [])
    {
        $request = new AddCommentsRequest();
        $request->setName($name);
        $request->setComments($comments);
        return $this->startApiCall('AddComments', $request, $optionalArgs)->wait();
    }

    /**
     * Adds a tag to the book. This RPC is a mixin.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $resource = 'resource';
     *     $tag = 'tag';
     *     $response = $libraryServiceClient->addTag($resource, $tag);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $resource     REQUIRED: The resource which the tag is being added to.
     *                             In the form "shelves/{shelf_id}/books/{book_id}".
     * @param string $tag          REQUIRED: The tag to add.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\AddTagResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function addTag($resource, $tag, array $optionalArgs = [])
    {
        $request = new AddTagRequest();
        $request->setResource($resource);
        $request->setTag($tag);
        return $this->startApiCall('AddTag', $request, $optionalArgs)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->archiveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ArchiveBooksResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function archiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }

        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        return $this->startApiCall('ArchiveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Shelf::fromShelf('[SHELF]');
     *     $book = new BookResponse();
     *     $response = $libraryServiceClient->createBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string       $name         The name of the shelf in which the book is created.
     * @param BookResponse $book         The book to create.
     * @param array        $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function createBook($name, $book, array $optionalArgs = [])
    {
        $request = new CreateBookRequest();
        $request->setName($name);
        $request->setBook($book);
        return $this->startApiCall('CreateBook', $request, $optionalArgs)->wait();
    }

    /**
     * Creates an inventory. Tests singleton resources.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedParent = Publisher::fromProjectLocationPublisher('[PROJECT]', '[LOCATION]', '[PUBLISHER]');
     *     $asset = 'asset';
     *     $parentAsset = 'parent_asset';
     *     $assets = [];
     *     $response = $libraryServiceClient->createInventory($formattedParent, $asset, $parentAsset, $assets);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string   $parent
     * @param string   $asset
     * @param string   $parentAsset
     * @param string[] $assets
     * @param array    $optionalArgs {
     *     Optional.
     *
     *     @type InventoryResponse $inventory
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\InventoryResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function createInventory($parent, $asset, $parentAsset, $assets, array $optionalArgs = [])
    {
        $request = new CreateInventoryRequest();
        $request->setParent($parent);
        $request->setAsset($asset);
        $request->setParentAsset($parentAsset);
        $request->setAssets($assets);
        if (isset($optionalArgs['inventory'])) {
            $request->setInventory($optionalArgs['inventory']);
        }

        return $this->startApiCall('CreateInventory', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     * RPC method comment may include special characters: <>&"`'&#64;.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new ShelfResponse();
     *     $response = $libraryServiceClient->createShelf($shelf);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param ShelfResponse $shelf        The shelf to create.
     * @param array         $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ShelfResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function createShelf($shelf, array $optionalArgs = [])
    {
        $request = new CreateShelfRequest();
        $request->setShelf($shelf);
        return $this->startApiCall('CreateShelf', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $libraryServiceClient->deleteBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to delete.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteBook($name, array $optionalArgs = [])
    {
        $request = new DeleteBookRequest();
        $request->setName($name);
        return $this->startApiCall('DeleteBook', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Shelf::fromShelf('[SHELF]');
     *     $libraryServiceClient->deleteShelf($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf to delete.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteShelf($name, array $optionalArgs = [])
    {
        $request = new DeleteShelfRequest();
        $request->setName($name);
        return $this->startApiCall('DeleteShelf', $request, $optionalArgs)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedNames = [
     *         Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]'),
     *     ];
     *     $formattedShelves = [
     *         Shelf::fromShelf('[SHELF]'),
     *     ];
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string[] $names
     * @param string[] $shelves
     * @param array    $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function findRelatedBooks($names, $shelves, array $optionalArgs = [])
    {
        $request = new FindRelatedBooksRequest();
        $request->setNames($names);
        $request->setShelves($shelves);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startApiCall('FindRelatedBooks', $request, $optionalArgs);
    }

    /**
     * Test long-running operations
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBigBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);
        return $this->startApiCall('GetBigBook', $request, $optionalArgs)->wait();
    }

    /**
     * Test long-running operations with empty return type.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBigNothing($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);
        return $this->startApiCall('GetBigNothing', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);
        return $this->startApiCall('GetBook', $request, $optionalArgs)->wait();
    }

    /**
     * Test proper OneOf-Any resource name mapping
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $altBookName
     *           An alternate book name, used to test proper processing of placeholders
     *           within additional bindings.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromAnywhereResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromAbsolutelyAnywhere($name, array $optionalArgs = [])
    {
        $request = new GetBookFromAbsolutelyAnywhereRequest();
        $request->setName($name);
        if (isset($optionalArgs['altBookName'])) {
            $request->setAltBookName($optionalArgs['altBookName']);
        }

        return $this->startApiCall('GetBookFromAbsolutelyAnywhere', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book from a shelf or archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedAltBookName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedPlace = Location::fromProjectLocation('[PROJECT]', '[LOCATION]');
     *     $formattedFolder = Folder::fromFolder('[FOLDER]');
     *     $response = $libraryServiceClient->getBookFromAnywhere($formattedName, $formattedAltBookName, $formattedPlace, $formattedFolder);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param string $altBookName  An alternate book name, used to test restricting flattened field to a
     *                             single resource name type in a oneof.
     * @param string $place
     * @param string $folder
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromAnywhereResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromAnywhere($name, $altBookName, $place, $folder, array $optionalArgs = [])
    {
        $request = new GetBookFromAnywhereRequest();
        $request->setName($name);
        $request->setAltBookName($altBookName);
        $request->setPlace($place);
        $request->setFolder($folder);
        return $this->startApiCall('GetBookFromAnywhere', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book from an archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = ArchivedBook::fromArchiveBook('[ARCHIVE]', '[BOOK]');
     *     $formattedParent = Project::fromProject('[PROJECT]');
     *     $response = $libraryServiceClient->getBookFromArchive($formattedName, $formattedParent);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param string $parent
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromArchiveResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromArchive($name, $parent, array $optionalArgs = [])
    {
        $request = new GetBookFromArchiveRequest();
        $request->setName($name);
        $request->setParent($parent);
        return $this->startApiCall('GetBookFromArchive', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Shelf::fromShelf('[SHELF]');
     *     $options = 'options';
     *     $response = $libraryServiceClient->getShelf($formattedName, $options);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf to retrieve.
     * @param string $options      To test 'options' parameter name conflict.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type SomeMessage $message
     *           Field to verify that message-type query parameter gets flattened.
     *     @type StringBuilder $stringBuilder
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ShelfResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getShelf($name, $options, array $optionalArgs = [])
    {
        $request = new GetShelfRequest();
        $request->setName($name);
        $request->setOptions($options);
        if (isset($optionalArgs['message'])) {
            $request->setMessage($optionalArgs['message']);
        }

        if (isset($optionalArgs['stringBuilder'])) {
            $request->setStringBuilder($optionalArgs['stringBuilder']);
        }

        return $this->startApiCall('GetShelf', $request, $optionalArgs)->wait();
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listAggregatedShelves();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listAggregatedShelves();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type int $maxResults
     *           Requested page size.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listAggregatedShelves(array $optionalArgs = [])
    {
        $request = new ListAggregatedShelvesRequest();
        if (isset($optionalArgs['maxResults'])) {
            $request->setMaxResults($optionalArgs['maxResults']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startApiCall('ListAggregatedShelves', $request, $optionalArgs);
    }

    /**
     * Lists books in a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Shelf::fromShelf('[SHELF]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf whose books we'd like to list.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           To test python built-in wrapping.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listBooks($name, array $optionalArgs = [])
    {
        $request = new ListBooksRequest();
        $request->setName($name);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        return $this->startApiCall('ListBooks', $request, $optionalArgs);
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->listShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $pageToken
     *           A token identifying a page of results the server should return.
     *           Typically, this is the value of
     *           [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
     *           returned from the previous call to `ListShelves` method.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ListShelvesResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startApiCall('ListShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listStrings(array $optionalArgs = [])
    {
        $request = new ListStringsRequest();
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startApiCall('ListStrings', $request, $optionalArgs);
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'longRunningArchiveBooks');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function longRunningArchiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }

        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        return $this->startApiCall('LongRunningArchiveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Shelf::fromShelf('[SHELF]');
     *     $formattedOtherShelfName = Shelf::fromShelf('[SHELF]');
     *     $response = $libraryServiceClient->mergeShelves($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name           The name of the shelf we're adding books to.
     * @param string $otherShelfName The name of the shelf we're removing books from and deleting.
     * @param array  $optionalArgs   {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ShelfResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function mergeShelves($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MergeShelvesRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);
        return $this->startApiCall('MergeShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedOtherShelfName = Shelf::fromShelf('[SHELF]');
     *     $response = $libraryServiceClient->moveBook($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name           The name of the book to move.
     * @param string $otherShelfName The name of the destination shelf.
     * @param array  $optionalArgs   {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function moveBook($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MoveBookRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);
        return $this->startApiCall('MoveBook', $request, $optionalArgs)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->moveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $destination
     *     @type string[] $publishers
     *     @type string $project
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\MoveBooksResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function moveBooks(array $optionalArgs = [])
    {
        $request = new MoveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }

        if (isset($optionalArgs['destination'])) {
            $request->setDestination($optionalArgs['destination']);
        }

        if (isset($optionalArgs['publishers'])) {
            $request->setPublishers($optionalArgs['publishers']);
        }

        if (isset($optionalArgs['project'])) {
            $request->setProject($optionalArgs['project']);
        }

        return $this->startApiCall('MoveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * This method is not exposed in the GAPIC config. It should be generated.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->privateListShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $pageToken
     *           A token identifying a page of results the server should return.
     *           Typically, this is the value of
     *           [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
     *           returned from the previous call to `ListShelves` method.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function privateListShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startApiCall('PrivateListShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a series of books.
     * Tests PHP required nested fields.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new ShelfResponse();
     *     $books = [];
     *     $seriesUuid = new SeriesUuidResponse();
     *     $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param ShelfResponse      $shelf        The shelf in which the series is created.
     * @param BookResponse[]     $books        The books to publish in the series.
     * @param SeriesUuidResponse $seriesUuid   Uniquely identifies the series to the publishing house.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type int $edition
     *           The edition of the series
     *     @type bool $reviewCopy
     *           If the book is in a pre-publish state
     *     @type string $publisher
     *           The publisher of the series.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\PublishSeriesResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function publishSeries($shelf, $books, $seriesUuid, array $optionalArgs = [])
    {
        $request = new PublishSeriesRequest();
        $request->setShelf($shelf);
        $request->setBooks($books);
        $request->setSeriesUuid($seriesUuid);
        if (isset($optionalArgs['edition'])) {
            $request->setEdition($optionalArgs['edition']);
        }

        if (isset($optionalArgs['reviewCopy'])) {
            $request->setReviewCopy($optionalArgs['reviewCopy']);
        }

        if (isset($optionalArgs['publisher'])) {
            $request->setPublisher($optionalArgs['publisher']);
        }

        return $this->startApiCall('PublishSeries', $request, $optionalArgs)->wait();
    }

    /**
     * Test using resource messages as request objects. Only used by PubSub
     * (CreateSubscription) for historical reasons. New APIs should always create
     * a separate message for a request.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $name = 'name';
     *     $libraryServiceClient->saveBook($name);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The resource name of the book.
     *                             BookResponse names have the form `bookShelves/{shelf_id}/books/{book_id}`.
     *                             Message field comment may include special characters: <>&"`'&#64;.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $author
     *           The name of the book author.
     *     @type string $title
     *           The title of the book.
     *     @type bool $read
     *           Value indicating whether the book has been read.
     *     @type int $rating
     *           For testing enums.
     *           For allowed values, use constants defined on {@see \Testing\BasicDiregapic\BookResponse\Rating}
     *     @type string $reader
     *     @type Any $anyValue
     *           For testing all well-known types.
     *     @type Struct $structValue
     *     @type Value $valueValue
     *     @type ListValue $listValueValue
     *     @type array $mapListValueValue
     *     @type Timestamp $timeValue
     *     @type Duration $durationValue
     *     @type FieldMask $fieldMaskValue
     *     @type Int32Value $int32Value
     *     @type UInt32Value $uint32Value
     *     @type Int64Value $int64Value
     *     @type UInt64Value $uint64Value
     *     @type FloatValue $floatValue
     *     @type DoubleValue $doubleValue
     *     @type StringValue $stringValue
     *     @type BoolValue $boolValue
     *     @type BytesValue $bytesValue
     *     @type array $mapStringValue
     *           Test doc generation of lists:
     *
     *           +   Here is a sentence about the first element of the list that continues
     *           into a second line.
     *           +   The second element of the list.
     *           +   Another element of the list where the indentation isn't consistent
     *           after a blank space.
     *
     *           The second paragraph of the list
     *           that doesn't have a hanging indent.
     *     @type array $mapMessageValue
     *     @type Used $resource
     *           Tests Python doc generation: should generate a dummy file for shared_type
     *           resource, but *not* its import, other_shared_type
     *     @type array $mapBoolKey
     *           For testing accessing map fields in samplegen
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function saveBook($name, array $optionalArgs = [])
    {
        $request = new BookResponse();
        $request->setName($name);
        if (isset($optionalArgs['author'])) {
            $request->setAuthor($optionalArgs['author']);
        }

        if (isset($optionalArgs['title'])) {
            $request->setTitle($optionalArgs['title']);
        }

        if (isset($optionalArgs['read'])) {
            $request->setRead($optionalArgs['read']);
        }

        if (isset($optionalArgs['rating'])) {
            $request->setRating($optionalArgs['rating']);
        }

        if (isset($optionalArgs['reader'])) {
            $request->setReader($optionalArgs['reader']);
        }

        if (isset($optionalArgs['anyValue'])) {
            $request->setAnyValue($optionalArgs['anyValue']);
        }

        if (isset($optionalArgs['structValue'])) {
            $request->setStructValue($optionalArgs['structValue']);
        }

        if (isset($optionalArgs['valueValue'])) {
            $request->setValueValue($optionalArgs['valueValue']);
        }

        if (isset($optionalArgs['listValueValue'])) {
            $request->setListValueValue($optionalArgs['listValueValue']);
        }

        if (isset($optionalArgs['mapListValueValue'])) {
            $request->setMapListValueValue($optionalArgs['mapListValueValue']);
        }

        if (isset($optionalArgs['timeValue'])) {
            $request->setTimeValue($optionalArgs['timeValue']);
        }

        if (isset($optionalArgs['durationValue'])) {
            $request->setDurationValue($optionalArgs['durationValue']);
        }

        if (isset($optionalArgs['fieldMaskValue'])) {
            $request->setFieldMaskValue($optionalArgs['fieldMaskValue']);
        }

        if (isset($optionalArgs['int32Value'])) {
            $request->setInt32Value($optionalArgs['int32Value']);
        }

        if (isset($optionalArgs['uint32Value'])) {
            $request->setUint32Value($optionalArgs['uint32Value']);
        }

        if (isset($optionalArgs['int64Value'])) {
            $request->setInt64Value($optionalArgs['int64Value']);
        }

        if (isset($optionalArgs['uint64Value'])) {
            $request->setUint64Value($optionalArgs['uint64Value']);
        }

        if (isset($optionalArgs['floatValue'])) {
            $request->setFloatValue($optionalArgs['floatValue']);
        }

        if (isset($optionalArgs['doubleValue'])) {
            $request->setDoubleValue($optionalArgs['doubleValue']);
        }

        if (isset($optionalArgs['stringValue'])) {
            $request->setStringValue($optionalArgs['stringValue']);
        }

        if (isset($optionalArgs['boolValue'])) {
            $request->setBoolValue($optionalArgs['boolValue']);
        }

        if (isset($optionalArgs['bytesValue'])) {
            $request->setBytesValue($optionalArgs['bytesValue']);
        }

        if (isset($optionalArgs['mapStringValue'])) {
            $request->setMapStringValue($optionalArgs['mapStringValue']);
        }

        if (isset($optionalArgs['mapMessageValue'])) {
            $request->setMapMessageValue($optionalArgs['mapMessageValue']);
        }

        if (isset($optionalArgs['resource'])) {
            $request->setResource($optionalArgs['resource']);
        }

        if (isset($optionalArgs['mapBoolKey'])) {
            $request->setMapBoolKey($optionalArgs['mapBoolKey']);
        }

        return $this->startApiCall('SaveBook', $request, $optionalArgs)->wait();
    }

    /**
     * Updates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $book = new BookResponse();
     *     $response = $libraryServiceClient->updateBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string       $name         The name of the book to update.
     * @param BookResponse $book         The book to update with.
     * @param array        $optionalArgs {
     *     Optional.
     *
     *     @type string $optionalFoo
     *           An optional foo.
     *     @type FieldMask $updateMask
     *           A field mask to apply, rendered as an HTTP parameter.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function updateBook($name, $book, array $optionalArgs = [])
    {
        $request = new UpdateBookRequest();
        $request->setName($name);
        $request->setBook($book);
        if (isset($optionalArgs['optionalFoo'])) {
            $request->setOptionalFoo($optionalArgs['optionalFoo']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        return $this->startApiCall('UpdateBook', $request, $optionalArgs)->wait();
    }

    /**
     * Updates the index of a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = Book::fromShelfBookOneBookTwo('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $indexName = 'index_name';
     *     $indexMap = [];
     *     $libraryServiceClient->updateBookIndex($formattedName, $indexName, $indexMap);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to update.
     * @param string $indexName    The name of the index for the book
     * @param array  $indexMap     The index to update the book with
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function updateBookIndex($name, $indexName, $indexMap, array $optionalArgs = [])
    {
        $request = new UpdateBookIndexRequest();
        $request->setName($name);
        $request->setIndexName($indexName);
        $request->setIndexMap($indexMap);
        return $this->startApiCall('UpdateBookIndex', $request, $optionalArgs)->wait();
    }
}
