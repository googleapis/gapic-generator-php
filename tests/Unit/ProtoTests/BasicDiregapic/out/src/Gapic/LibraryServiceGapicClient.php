<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/google/googleapis/blob/master/tests/Unit/ProtoTests/BasicDiregapic/library_rest.proto
 * Updates to the above are reflected here through a refresh process.
 */

declare(strict_types=1);

namespace Testing\BasicDiregapic\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;

use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;

use Google\ApiCore\PathTemplate;
use Google\ApiCore\RequestParamsHeaderDescriptor;

use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Operation;
use Google\Protobuf\Any;
use Google\Protobuf\BoolValue;
use Google\Protobuf\BytesValue;
use Google\Protobuf\DoubleValue;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\FloatValue;
use Google\Protobuf\GPBEmpty;
use Google\Protobuf\Int32Value;
use Google\Protobuf\Int64Value;
use Google\Protobuf\ListValue;
use Google\Protobuf\StringValue;
use Google\Protobuf\Struct;
use Google\Protobuf\Timestamp;
use Google\Protobuf\UInt32Value;
use Google\Protobuf\UInt64Value;
use Google\Protobuf\Value;
use Testing\BasicDiregapic\AddCommentsRequest;

use Testing\BasicDiregapic\AddTagRequest;
use Testing\BasicDiregapic\AddTagResponse;
use Testing\BasicDiregapic\ArchiveBooksRequest;

use Testing\BasicDiregapic\ArchiveBooksResponse;
use Testing\BasicDiregapic\Book;
use Testing\BasicDiregapic\BookFromAnywhere;
use Testing\BasicDiregapic\BookFromArchive;
use Testing\BasicDiregapic\Comment;
use Testing\BasicDiregapic\CreateBookRequest;
use Testing\BasicDiregapic\CreateInventoryRequest;
use Testing\BasicDiregapic\CreateShelfRequest;
use Testing\BasicDiregapic\DeleteBookRequest;
use Testing\BasicDiregapic\DeleteShelfRequest;
use Testing\BasicDiregapic\FindRelatedBooksRequest;
use Testing\BasicDiregapic\FindRelatedBooksResponse;
use Testing\BasicDiregapic\GetBookFromAbsolutelyAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromArchiveRequest;
use Testing\BasicDiregapic\GetBookRequest;

use Testing\BasicDiregapic\GetShelfRequest;
use Testing\BasicDiregapic\Inventory;

use Testing\BasicDiregapic\ListAggregatedShelvesRequest;
use Testing\BasicDiregapic\ListAggregatedShelvesResponse;
use Testing\BasicDiregapic\ListBooksRequest;
use Testing\BasicDiregapic\ListBooksResponse;
use Testing\BasicDiregapic\ListShelvesRequest;
use Testing\BasicDiregapic\ListShelvesResponse;
use Testing\BasicDiregapic\ListStringsRequest;
use Testing\BasicDiregapic\ListStringsResponse;
use Testing\BasicDiregapic\MergeShelvesRequest;
use Testing\BasicDiregapic\MoveBookRequest;
use Testing\BasicDiregapic\MoveBooksRequest;
use Testing\BasicDiregapic\MoveBooksResponse;
use Testing\BasicDiregapic\PublishSeriesRequest;
use Testing\BasicDiregapic\PublishSeriesResponse;
use Testing\BasicDiregapic\SeriesUuid;
use Testing\BasicDiregapic\Shelf;
use Testing\BasicDiregapic\SomeMessage;
use Testing\BasicDiregapic\StringBuilder;
use Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest;
use Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerEnum;
use Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerMessage;
use Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsResponse;
use Testing\BasicDiregapic\UpdateBookIndexRequest;

use Testing\BasicDiregapic\UpdateBookRequest;
use Testing\BasicDiregapic\Used;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 * resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 * resources, named `bookShelves/&#42;/books/*`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'&#64;.
 *
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $libraryServiceClient = new LibraryServiceClient();
 * try {
 *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
 *     $comments = [];
 *     $libraryServiceClient->addComments($formattedName, $comments);
 * } finally {
 *     $libraryServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assistwith these names, this class includes a format method for each type of
 * name, and additionallya parseName method to extract the individual identifiers
 * contained within formatted namesthat are returned by the API.
 */
class LibraryServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.example.library.v1.LibraryService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com:1234';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private static $archiveNameTemplate;

    private static $archiveBookNameTemplate;

    private static $archivedBookNameTemplate;

    private static $bookNameTemplate;

    private static $folderNameTemplate;

    private static $inventoryNameTemplate;

    private static $locationNameTemplate;

    private static $organizationReaderNameTemplate;

    private static $projectNameTemplate;

    private static $projectBookNameTemplate;

    private static $projectLocationPublisherBookNameTemplate;

    private static $projectReaderNameTemplate;

    private static $projectShelfReaderSurnameReaderFirstNameNameTemplate;

    private static $publisherNameTemplate;

    private static $readerNameTemplate;

    private static $shelfNameTemplate;

    private static $shelfBookOneBookTwoNameTemplate;

    private static $pathTemplateMap;

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/library_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/library_service_descriptor_config.php',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/library_service_rest_client_config.php',
                ],
            ],
        ];
    }

    private static function getArchiveNameTemplate()
    {
        if (self::$archiveNameTemplate == null) {
            self::$archiveNameTemplate = new PathTemplate('archives/{archive}');
        }

        return self::$archiveNameTemplate;
    }

    private static function getArchiveBookNameTemplate()
    {
        if (self::$archiveBookNameTemplate == null) {
            self::$archiveBookNameTemplate = new PathTemplate('archives/{archive}/books/{book}');
        }

        return self::$archiveBookNameTemplate;
    }

    private static function getArchivedBookNameTemplate()
    {
        if (self::$archivedBookNameTemplate == null) {
            self::$archivedBookNameTemplate = new PathTemplate('archives/{archive}/books/{book}');
        }

        return self::$archivedBookNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf}/books/{book_one}~{book_two}');
        }

        return self::$bookNameTemplate;
    }

    private static function getFolderNameTemplate()
    {
        if (self::$folderNameTemplate == null) {
            self::$folderNameTemplate = new PathTemplate('folders/{folder}');
        }

        return self::$folderNameTemplate;
    }

    private static function getInventoryNameTemplate()
    {
        if (self::$inventoryNameTemplate == null) {
            self::$inventoryNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}/inventory');
        }

        return self::$inventoryNameTemplate;
    }

    private static function getLocationNameTemplate()
    {
        if (self::$locationNameTemplate == null) {
            self::$locationNameTemplate = new PathTemplate('projects/{project}/locations/{location}');
        }

        return self::$locationNameTemplate;
    }

    private static function getOrganizationReaderNameTemplate()
    {
        if (self::$organizationReaderNameTemplate == null) {
            self::$organizationReaderNameTemplate = new PathTemplate('organization/{organization}/reader');
        }

        return self::$organizationReaderNameTemplate;
    }

    private static function getProjectNameTemplate()
    {
        if (self::$projectNameTemplate == null) {
            self::$projectNameTemplate = new PathTemplate('projects/{project}');
        }

        return self::$projectNameTemplate;
    }

    private static function getProjectBookNameTemplate()
    {
        if (self::$projectBookNameTemplate == null) {
            self::$projectBookNameTemplate = new PathTemplate('projects/{project}/books/{book}');
        }

        return self::$projectBookNameTemplate;
    }

    private static function getProjectLocationPublisherBookNameTemplate()
    {
        if (self::$projectLocationPublisherBookNameTemplate == null) {
            self::$projectLocationPublisherBookNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}/inventory/books/{book}');
        }

        return self::$projectLocationPublisherBookNameTemplate;
    }

    private static function getProjectReaderNameTemplate()
    {
        if (self::$projectReaderNameTemplate == null) {
            self::$projectReaderNameTemplate = new PathTemplate('projects/{project}/readers/{reader}');
        }

        return self::$projectReaderNameTemplate;
    }

    private static function getProjectShelfReaderSurnameReaderFirstNameNameTemplate()
    {
        if (self::$projectShelfReaderSurnameReaderFirstNameNameTemplate == null) {
            self::$projectShelfReaderSurnameReaderFirstNameNameTemplate = new PathTemplate('projects/{project}/shelves/{shelf}/readers/{reader_surname}.{reader_first_name}');
        }

        return self::$projectShelfReaderSurnameReaderFirstNameNameTemplate;
    }

    private static function getPublisherNameTemplate()
    {
        if (self::$publisherNameTemplate == null) {
            self::$publisherNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}');
        }

        return self::$publisherNameTemplate;
    }

    private static function getReaderNameTemplate()
    {
        if (self::$readerNameTemplate == null) {
            self::$readerNameTemplate = new PathTemplate('projects/{project}/readers/{reader}');
        }

        return self::$readerNameTemplate;
    }

    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getShelfBookOneBookTwoNameTemplate()
    {
        if (self::$shelfBookOneBookTwoNameTemplate == null) {
            self::$shelfBookOneBookTwoNameTemplate = new PathTemplate('shelves/{shelf}/books/{book_one}~{book_two}');
        }

        return self::$shelfBookOneBookTwoNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'archive' => self::getArchiveNameTemplate(),
                'archiveBook' => self::getArchiveBookNameTemplate(),
                'archivedBook' => self::getArchivedBookNameTemplate(),
                'book' => self::getBookNameTemplate(),
                'folder' => self::getFolderNameTemplate(),
                'inventory' => self::getInventoryNameTemplate(),
                'location' => self::getLocationNameTemplate(),
                'organizationReader' => self::getOrganizationReaderNameTemplate(),
                'project' => self::getProjectNameTemplate(),
                'projectBook' => self::getProjectBookNameTemplate(),
                'projectLocationPublisherBook' => self::getProjectLocationPublisherBookNameTemplate(),
                'projectReader' => self::getProjectReaderNameTemplate(),
                'projectShelfReaderSurnameReaderFirstName' => self::getProjectShelfReaderSurnameReaderFirstNameNameTemplate(),
                'publisher' => self::getPublisherNameTemplate(),
                'reader' => self::getReaderNameTemplate(),
                'shelf' => self::getShelfNameTemplate(),
                'shelfBookOneBookTwo' => self::getShelfBookOneBookTwoNameTemplate(),
            ];
        }

        return self::$pathTemplateMap;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a archive
     * resource.
     *
     * @param string $archive
     *
     * @return string The formatted archive resource.
     */
    public static function archiveName($archive)
    {
        return self::getArchiveNameTemplate()->render([
            'archive' => $archive,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a archive_book
     * resource.
     *
     * @param string $archive
     * @param string $book
     *
     * @return string The formatted archive_book resource.
     */
    public static function archiveBookName($archive, $book)
    {
        return self::getArchiveBookNameTemplate()->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * archived_book resource.
     *
     * @param string $archive
     * @param string $book
     *
     * @return string The formatted archived_book resource.
     */
    public static function archivedBookName($archive, $book)
    {
        return self::getArchivedBookNameTemplate()->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a book
     * resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     *
     * @return string The formatted book resource.
     */
    public static function bookName($shelf, $bookOne, $bookTwo)
    {
        return self::getBookNameTemplate()->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a folder
     * resource.
     *
     * @param string $folder
     *
     * @return string The formatted folder resource.
     */
    public static function folderName($folder)
    {
        return self::getFolderNameTemplate()->render([
            'folder' => $folder,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a inventory
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     *
     * @return string The formatted inventory resource.
     */
    public static function inventoryName($project, $location, $publisher)
    {
        return self::getInventoryNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName($project, $location)
    {
        return self::getLocationNameTemplate()->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_reader resource.
     *
     * @param string $organization
     *
     * @return string The formatted organization_reader resource.
     */
    public static function organizationReaderName($organization)
    {
        return self::getOrganizationReaderNameTemplate()->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getProjectNameTemplate()->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project_book
     * resource.
     *
     * @param string $project
     * @param string $book
     *
     * @return string The formatted project_book resource.
     */
    public static function projectBookName($project, $book)
    {
        return self::getProjectBookNameTemplate()->render([
            'project' => $project,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_location_publisher_book resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     * @param string $book
     *
     * @return string The formatted project_location_publisher_book resource.
     */
    public static function projectLocationPublisherBookName($project, $location, $publisher, $book)
    {
        return self::getProjectLocationPublisherBookNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_reader resource.
     *
     * @param string $project
     * @param string $reader
     *
     * @return string The formatted project_reader resource.
     */
    public static function projectReaderName($project, $reader)
    {
        return self::getProjectReaderNameTemplate()->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_shelf_reader_surname_reader_first_name resource.
     *
     * @param string $project
     * @param string $shelf
     * @param string $readerSurname
     * @param string $readerFirstName
     *
     * @return string The formatted project_shelf_reader_surname_reader_first_name resource.
     */
    public static function projectShelfReaderSurnameReaderFirstNameName($project, $shelf, $readerSurname, $readerFirstName)
    {
        return self::getProjectShelfReaderSurnameReaderFirstNameNameTemplate()->render([
            'project' => $project,
            'shelf' => $shelf,
            'reader_surname' => $readerSurname,
            'reader_first_name' => $readerFirstName,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a publisher
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     *
     * @return string The formatted publisher resource.
     */
    public static function publisherName($project, $location, $publisher)
    {
        return self::getPublisherNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a reader
     * resource.
     *
     * @param string $project
     * @param string $reader
     *
     * @return string The formatted reader resource.
     */
    public static function readerName($project, $reader)
    {
        return self::getReaderNameTemplate()->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a shelf
     * resource.
     *
     * @param string $shelf
     *
     * @return string The formatted shelf resource.
     */
    public static function shelfName($shelf)
    {
        return self::getShelfNameTemplate()->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * shelf_book_one_book_two resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     *
     * @return string The formatted shelf_book_one_book_two resource.
     */
    public static function shelfBookOneBookTwoName($shelf, $bookOne, $bookTwo)
    {
        return self::getShelfBookOneBookTwoNameTemplate()->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - archive: archives/{archive}
     * - archiveBook: archives/{archive}/books/{book}
     * - archivedBook: archives/{archive}/books/{book}
     * - book: shelves/{shelf}/books/{book_one}~{book_two}
     * - folder: folders/{folder}
     * - inventory: projects/{project}/locations/{location}/publishers/{publisher}/inventory
     * - location: projects/{project}/locations/{location}
     * - organizationReader: organization/{organization}/reader
     * - project: projects/{project}
     * - projectBook: projects/{project}/books/{book}
     * - projectLocationPublisherBook: projects/{project}/locations/{location}/publishers/{publisher}/inventory/books/{book}
     * - projectReader: projects/{project}/readers/{reader}
     * - projectShelfReaderSurnameReaderFirstName: projects/{project}/shelves/{shelf}/readers/{reader_surname}.{reader_first_name}
     * - publisher: projects/{project}/locations/{location}/publishers/{publisher}
     * - reader: projects/{project}/readers/{reader}
     * - shelf: shelves/{shelf}
     * - shelfBookOneBookTwo: shelves/{shelf}/books/{book_one}~{book_two}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();
        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }

            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }

        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'library-example.googleapis.com:1234:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, supports only
     *           `rest`. *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $serviceAddress setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /**
     * Adds comments to a book
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $comments = [];
     *     $libraryServiceClient->addComments($formattedName, $comments);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string    $name
     * @param Comment[] $comments
     * @param array     $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function addComments($name, $comments, array $optionalArgs = [])
    {
        $request = new AddCommentsRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setComments($comments);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('AddComments', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Adds a tag to the book. This RPC is a mixin.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $resource = 'resource';
     *     $tag = 'tag';
     *     $response = $libraryServiceClient->addTag($resource, $tag);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $resource     REQUIRED: The resource which the tag is being added to.
     *                             In the form "shelves/{shelf_id}/books/{book_id}".
     * @param string $tag          REQUIRED: The tag to add.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\AddTagResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function addTag($resource, $tag, array $optionalArgs = [])
    {
        $request = new AddTagRequest();
        $requestParamHeaders = [];
        $request->setResource($resource);
        $request->setTag($tag);
        $requestParamHeaders['resource'] = $resource;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('AddTag', AddTagResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->archiveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ArchiveBooksResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function archiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
            $requestParamHeaders['source'] = $optionalArgs['source'];
        }

        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('ArchiveBooks', ArchiveBooksResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->createBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf in which the book is created.
     * @param Book   $book         The book to create.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Book
     *
     * @throws ApiException if the remote call fails
     */
    public function createBook($name, $book, array $optionalArgs = [])
    {
        $request = new CreateBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setBook($book);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateBook', Book::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates an inventory. Tests singleton resources.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedParent = $libraryServiceClient->publisherName('[PROJECT]', '[LOCATION]', '[PUBLISHER]');
     *     $formattedAsset = $libraryServiceClient->assetName('asset-c04e34d445e31a2159c1bfeb882ba212');
     *     $parentAsset = 'parent_asset';
     *     $formattedAssets = [
     *         $libraryServiceClient->assetName('assets-32bb636196f91ed59d7a49190e26b42c'),
     *     ];
     *     $response = $libraryServiceClient->createInventory($formattedParent, $formattedAsset, $parentAsset, $formattedAssets);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string   $parent
     * @param string   $asset
     * @param string   $parentAsset
     * @param string[] $assets
     * @param array    $optionalArgs {
     *     Optional.
     *
     *     @type Inventory $inventory
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Inventory
     *
     * @throws ApiException if the remote call fails
     */
    public function createInventory($parent, $asset, $parentAsset, $assets, array $optionalArgs = [])
    {
        $request = new CreateInventoryRequest();
        $requestParamHeaders = [];
        $request->setParent($parent);
        $request->setAsset($asset);
        $request->setParentAsset($parentAsset);
        $request->setAssets($assets);
        $requestParamHeaders['parent'] = $parent;
        if (isset($optionalArgs['inventory'])) {
            $request->setInventory($optionalArgs['inventory']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('CreateInventory', Inventory::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     * RPC method comment may include special characters: <>&"`'&#64;.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new Shelf();
     *     $response = $libraryServiceClient->createShelf($shelf);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf $shelf        The shelf to create.
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Shelf
     *
     * @throws ApiException if the remote call fails
     */
    public function createShelf($shelf, array $optionalArgs = [])
    {
        $request = new CreateShelfRequest();
        $request->setShelf($shelf);
        return $this->startCall('CreateShelf', Shelf::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $libraryServiceClient->deleteBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to delete.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteBook($name, array $optionalArgs = [])
    {
        $request = new DeleteBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteBook', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Deletes a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $libraryServiceClient->deleteShelf($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf to delete.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function deleteShelf($name, array $optionalArgs = [])
    {
        $request = new DeleteShelfRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('DeleteShelf', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedNames = [
     *         $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]'),
     *     ];
     *     $formattedShelves = [
     *         $libraryServiceClient->shelfName('[SHELF]'),
     *     ];
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string[] $names
     * @param string[] $shelves
     * @param array    $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function findRelatedBooks($names, $shelves, array $optionalArgs = [])
    {
        $request = new FindRelatedBooksRequest();
        $request->setNames($names);
        $request->setShelves($shelves);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse('FindRelatedBooks', $optionalArgs, FindRelatedBooksResponse::class, $request);
    }

    /**
     * Test long-running operations
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBigBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('GetBigBook', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Test long-running operations with empty return type.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function getBigNothing($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('GetBigNothing', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Gets a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Book
     *
     * @throws ApiException if the remote call fails
     */
    public function getBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetBook', Book::class, $optionalArgs, $request)->wait();
    }

    /**
     * Test proper OneOf-Any resource name mapping
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $altBookName
     *           An alternate book name, used to test proper processing of placeholders
     *           within additional bindings.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromAnywhere
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromAbsolutelyAnywhere($name, array $optionalArgs = [])
    {
        $request = new GetBookFromAbsolutelyAnywhereRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['altBookName'])) {
            $request->setAltBookName($optionalArgs['altBookName']);
            $requestParamHeaders['alt_book_name'] = $optionalArgs['altBookName'];
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetBookFromAbsolutelyAnywhere', BookFromAnywhere::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets a book from a shelf or archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedAltBookName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedPlace = $libraryServiceClient->locationName('[PROJECT]', '[LOCATION]');
     *     $formattedFolder = $libraryServiceClient->folderName('[FOLDER]');
     *     $response = $libraryServiceClient->getBookFromAnywhere($formattedName, $formattedAltBookName, $formattedPlace, $formattedFolder);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param string $altBookName  An alternate book name, used to test restricting flattened field to a
     *                             single resource name type in a oneof.
     * @param string $place
     * @param string $folder
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromAnywhere
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromAnywhere($name, $altBookName, $place, $folder, array $optionalArgs = [])
    {
        $request = new GetBookFromAnywhereRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setAltBookName($altBookName);
        $request->setPlace($place);
        $request->setFolder($folder);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetBookFromAnywhere', BookFromAnywhere::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets a book from an archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->archivedBookName('[ARCHIVE]', '[BOOK]');
     *     $formattedParent = $libraryServiceClient->projectName('[PROJECT]');
     *     $response = $libraryServiceClient->getBookFromArchive($formattedName, $formattedParent);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to retrieve.
     * @param string $parent
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\BookFromArchive
     *
     * @throws ApiException if the remote call fails
     */
    public function getBookFromArchive($name, $parent, array $optionalArgs = [])
    {
        $request = new GetBookFromArchiveRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setParent($parent);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetBookFromArchive', BookFromArchive::class, $optionalArgs, $request)->wait();
    }

    /**
     * Gets a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $options = 'options';
     *     $response = $libraryServiceClient->getShelf($formattedName, $options);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf to retrieve.
     * @param string $options      To test 'options' parameter name conflict.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type SomeMessage $message
     *           Field to verify that message-type query parameter gets flattened.
     *     @type StringBuilder $stringBuilder
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Shelf
     *
     * @throws ApiException if the remote call fails
     */
    public function getShelf($name, $options, array $optionalArgs = [])
    {
        $request = new GetShelfRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setOptions($options);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['message'])) {
            $request->setMessage($optionalArgs['message']);
        }

        if (isset($optionalArgs['stringBuilder'])) {
            $request->setStringBuilder($optionalArgs['stringBuilder']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('GetShelf', Shelf::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->listAggregatedShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type int $maxResults
     *           Requested page size.
     *     @type string $pageToken
     *           A token identifying a page of results the server should return.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ListAggregatedShelvesResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listAggregatedShelves(array $optionalArgs = [])
    {
        $request = new ListAggregatedShelvesRequest();
        if (isset($optionalArgs['maxResults'])) {
            $request->setMaxResults($optionalArgs['maxResults']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startCall('ListAggregatedShelves', ListAggregatedShelvesResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists books in a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the shelf whose books we'd like to list.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type string $filter
     *           To test python built-in wrapping.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listBooks($name, array $optionalArgs = [])
    {
        $request = new ListBooksRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->getPagedListResponse('ListBooks', $optionalArgs, ListBooksResponse::class, $request);
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->listShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $pageToken
     *           A token identifying a page of results the server should return.
     *           Typically, this is the value of
     *           [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
     *           returned from the previous call to `ListShelves` method.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\ListShelvesResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startCall('ListShelves', ListShelvesResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *     // Alternatively:
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $name
     *     @type int $pageSize
     *           The maximum number of resources contained in the underlying API
     *           response. The API may return fewer values in a page, even if
     *           there are additional values to be retrieved.
     *     @type string $pageToken
     *           A page token is used to specify a page of values to be returned.
     *           If no page token is specified (the default), the first page
     *           of values will be returned. Any page token used here must have
     *           been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function listStrings(array $optionalArgs = [])
    {
        $request = new ListStringsRequest();
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
        }

        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }

        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse('ListStrings', $optionalArgs, ListStringsResponse::class, $request);
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *     // Alternatively:
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'longRunningArchiveBooks');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *         $result = $newOperationResponse->getResult();
     *     // doSomethingWith($result)
     *     } else {
     *         $error = $newOperationResponse->getError();
     *         // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function longRunningArchiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
            $requestParamHeaders['source'] = $optionalArgs['source'];
        }

        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startOperationsCall('LongRunningArchiveBooks', $optionalArgs, $request, $this->getOperationsClient())->wait();
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF]');
     *     $response = $libraryServiceClient->mergeShelves($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name           The name of the shelf we're adding books to.
     * @param string $otherShelfName The name of the shelf we're removing books from and deleting.
     * @param array  $optionalArgs   {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Shelf
     *
     * @throws ApiException if the remote call fails
     */
    public function mergeShelves($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MergeShelvesRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('MergeShelves', Shelf::class, $optionalArgs, $request)->wait();
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF]');
     *     $response = $libraryServiceClient->moveBook($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name           The name of the book to move.
     * @param string $otherShelfName The name of the destination shelf.
     * @param array  $optionalArgs   {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Book
     *
     * @throws ApiException if the remote call fails
     */
    public function moveBook($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MoveBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('MoveBook', Book::class, $optionalArgs, $request)->wait();
    }

    /**
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->moveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $source
     *     @type string $destination
     *     @type string[] $publishers
     *     @type string $project
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\MoveBooksResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function moveBooks(array $optionalArgs = [])
    {
        $request = new MoveBooksRequest();
        $requestParamHeaders = [];
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
            $requestParamHeaders['source'] = $optionalArgs['source'];
        }

        if (isset($optionalArgs['destination'])) {
            $request->setDestination($optionalArgs['destination']);
        }

        if (isset($optionalArgs['publishers'])) {
            $request->setPublishers($optionalArgs['publishers']);
        }

        if (isset($optionalArgs['project'])) {
            $request->setProject($optionalArgs['project']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('MoveBooks', MoveBooksResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * This method is not exposed in the GAPIC config. It should be generated.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->privateListShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *
     *     @type string $pageToken
     *           A token identifying a page of results the server should return.
     *           Typically, this is the value of
     *           [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
     *           returned from the previous call to `ListShelves` method.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Book
     *
     * @throws ApiException if the remote call fails
     */
    public function privateListShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startCall('PrivateListShelves', Book::class, $optionalArgs, $request)->wait();
    }

    /**
     * Creates a series of books.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new Shelf();
     *     $books = [];
     *     $seriesUuid = new SeriesUuid();
     *     $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf      $shelf        The shelf in which the series is created.
     * @param Book[]     $books        The books to publish in the series.
     * @param SeriesUuid $seriesUuid   Uniquely identifies the series to the publishing house.
     * @param array      $optionalArgs {
     *     Optional.
     *
     *     @type int $edition
     *           The edition of the series
     *     @type bool $reviewCopy
     *           If the book is in a pre-publish state
     *     @type string $publisher
     *           The publisher of the series.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\PublishSeriesResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function publishSeries($shelf, $books, $seriesUuid, array $optionalArgs = [])
    {
        $request = new PublishSeriesRequest();
        $requestParamHeaders = [];
        $request->setShelf($shelf);
        $request->setBooks($books);
        $request->setSeriesUuid($seriesUuid);
        $requestParamHeaders['shelf.name'] = $shelf->getName();
        if (isset($optionalArgs['edition'])) {
            $request->setEdition($optionalArgs['edition']);
        }

        if (isset($optionalArgs['reviewCopy'])) {
            $request->setReviewCopy($optionalArgs['reviewCopy']);
        }

        if (isset($optionalArgs['publisher'])) {
            $request->setPublisher($optionalArgs['publisher']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('PublishSeries', PublishSeriesResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Test using resource messages as request objects. Only used by PubSub
     * (CreateSubscription) for historical reasons. New APIs should always create
     * a separate message for a request.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $name = 'name';
     *     $libraryServiceClient->saveBook($name);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The resource name of the book.
     *                             Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
     *                             Message field comment may include special characters: <>&"`'&#64;.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $author
     *           The name of the book author.
     *     @type string $title
     *           The title of the book.
     *     @type bool $read
     *           Value indicating whether the book has been read.
     *     @type int $rating
     *           For testing enums.
     *           For allowed values, use constants defined on {@see \Testing\BasicDiregapic\Book\Rating}
     *     @type string $reader
     *     @type Any $anyValue
     *           For testing all well-known types.
     *     @type Struct $structValue
     *     @type Value $valueValue
     *     @type ListValue $listValueValue
     *     @type array $mapListValueValue
     *     @type Timestamp $timeValue
     *     @type Duration $durationValue
     *     @type FieldMask $fieldMaskValue
     *     @type Int32Value $int32Value
     *     @type UInt32Value $uint32Value
     *     @type Int64Value $int64Value
     *     @type UInt64Value $uint64Value
     *     @type FloatValue $floatValue
     *     @type DoubleValue $doubleValue
     *     @type StringValue $stringValue
     *     @type BoolValue $boolValue
     *     @type BytesValue $bytesValue
     *     @type array $mapStringValue
     *           Test doc generation of lists:
     *
     *           +   Here is a sentence about the first element of the list that continues
     *           into a second line.
     *           +   The second element of the list.
     *           +   Another element of the list where the indentation isn't consistent
     *           after a blank space.
     *
     *           The second paragraph of the list
     *           that doesn't have a hanging indent.
     *     @type array $mapMessageValue
     *     @type Used $resource
     *           Tests Python doc generation: should generate a dummy file for shared_type
     *           resource, but *not* its import, other_shared_type
     *     @type array $mapBoolKey
     *           For testing accessing map fields in samplegen
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function saveBook($name, array $optionalArgs = [])
    {
        $request = new Book();
        $request->setName($name);
        if (isset($optionalArgs['author'])) {
            $request->setAuthor($optionalArgs['author']);
        }

        if (isset($optionalArgs['title'])) {
            $request->setTitle($optionalArgs['title']);
        }

        if (isset($optionalArgs['read'])) {
            $request->setRead($optionalArgs['read']);
        }

        if (isset($optionalArgs['rating'])) {
            $request->setRating($optionalArgs['rating']);
        }

        if (isset($optionalArgs['reader'])) {
            $request->setReader($optionalArgs['reader']);
        }

        if (isset($optionalArgs['anyValue'])) {
            $request->setAnyValue($optionalArgs['anyValue']);
        }

        if (isset($optionalArgs['structValue'])) {
            $request->setStructValue($optionalArgs['structValue']);
        }

        if (isset($optionalArgs['valueValue'])) {
            $request->setValueValue($optionalArgs['valueValue']);
        }

        if (isset($optionalArgs['listValueValue'])) {
            $request->setListValueValue($optionalArgs['listValueValue']);
        }

        if (isset($optionalArgs['mapListValueValue'])) {
            $request->setMapListValueValue($optionalArgs['mapListValueValue']);
        }

        if (isset($optionalArgs['timeValue'])) {
            $request->setTimeValue($optionalArgs['timeValue']);
        }

        if (isset($optionalArgs['durationValue'])) {
            $request->setDurationValue($optionalArgs['durationValue']);
        }

        if (isset($optionalArgs['fieldMaskValue'])) {
            $request->setFieldMaskValue($optionalArgs['fieldMaskValue']);
        }

        if (isset($optionalArgs['int32Value'])) {
            $request->setInt32Value($optionalArgs['int32Value']);
        }

        if (isset($optionalArgs['uint32Value'])) {
            $request->setUint32Value($optionalArgs['uint32Value']);
        }

        if (isset($optionalArgs['int64Value'])) {
            $request->setInt64Value($optionalArgs['int64Value']);
        }

        if (isset($optionalArgs['uint64Value'])) {
            $request->setUint64Value($optionalArgs['uint64Value']);
        }

        if (isset($optionalArgs['floatValue'])) {
            $request->setFloatValue($optionalArgs['floatValue']);
        }

        if (isset($optionalArgs['doubleValue'])) {
            $request->setDoubleValue($optionalArgs['doubleValue']);
        }

        if (isset($optionalArgs['stringValue'])) {
            $request->setStringValue($optionalArgs['stringValue']);
        }

        if (isset($optionalArgs['boolValue'])) {
            $request->setBoolValue($optionalArgs['boolValue']);
        }

        if (isset($optionalArgs['bytesValue'])) {
            $request->setBytesValue($optionalArgs['bytesValue']);
        }

        if (isset($optionalArgs['mapStringValue'])) {
            $request->setMapStringValue($optionalArgs['mapStringValue']);
        }

        if (isset($optionalArgs['mapMessageValue'])) {
            $request->setMapMessageValue($optionalArgs['mapMessageValue']);
        }

        if (isset($optionalArgs['resource'])) {
            $request->setResource($optionalArgs['resource']);
        }

        if (isset($optionalArgs['mapBoolKey'])) {
            $request->setMapBoolKey($optionalArgs['mapBoolKey']);
        }

        return $this->startCall('SaveBook', GPBEmpty::class, $optionalArgs, $request)->wait();
    }

    /**
     * Test optional flattening parameters of all types
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $requiredSingularInt32 = 0;
     *     $requiredSingularInt64 = 0;
     *     $requiredSingularFloat = 0.0;
     *     $requiredSingularDouble = 0.0;
     *     $requiredSingularBool = false;
     *     $requiredSingularEnum = InnerEnum::ZERO;
     *     $requiredSingularString = 'required_singular_string';
     *     $requiredSingularBytes = '';
     *     $requiredSingularMessage = new InnerMessage();
     *     $formattedRequiredSingularResourceName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedRequiredSingularResourceNameOneof = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $requiredSingularResourceNameCommon = 'required_singular_resource_name_common';
     *     $requiredSingularFixed32 = 0;
     *     $requiredSingularFixed64 = 0;
     *     $requiredRepeatedInt32 = [];
     *     $requiredRepeatedInt64 = [];
     *     $requiredRepeatedFloat = [];
     *     $requiredRepeatedDouble = [];
     *     $requiredRepeatedBool = [];
     *     $requiredRepeatedEnum = [];
     *     $requiredRepeatedString = [];
     *     $requiredRepeatedBytes = [];
     *     $requiredRepeatedMessage = [];
     *     $formattedRequiredRepeatedResourceName = [
     *         $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]'),
     *     ];
     *     $formattedRequiredRepeatedResourceNameOneof = [
     *         $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]'),
     *     ];
     *     $requiredRepeatedResourceNameCommon = [];
     *     $requiredRepeatedFixed32 = [];
     *     $requiredRepeatedFixed64 = [];
     *     $requiredMap = [];
     *     $requiredAnyValue = new Any();
     *     $requiredStructValue = new Struct();
     *     $requiredValueValue = new Value();
     *     $requiredListValueValue = new ListValue();
     *     $requiredTimeValue = new Timestamp();
     *     $requiredDurationValue = new Duration();
     *     $requiredFieldMaskValue = new FieldMask();
     *     $requiredInt32Value = new Int32Value();
     *     $requiredUint32Value = new UInt32Value();
     *     $requiredInt64Value = new Int64Value();
     *     $requiredUint64Value = new UInt64Value();
     *     $requiredFloatValue = new FloatValue();
     *     $requiredDoubleValue = new DoubleValue();
     *     $requiredStringValue = new StringValue();
     *     $requiredBoolValue = new BoolValue();
     *     $requiredBytesValue = new BytesValue();
     *     $requiredRepeatedAnyValue = [];
     *     $requiredRepeatedStructValue = [];
     *     $requiredRepeatedValueValue = [];
     *     $requiredRepeatedListValueValue = [];
     *     $requiredRepeatedTimeValue = [];
     *     $requiredRepeatedDurationValue = [];
     *     $requiredRepeatedFieldMaskValue = [];
     *     $requiredRepeatedInt32Value = [];
     *     $requiredRepeatedUint32Value = [];
     *     $requiredRepeatedInt64Value = [];
     *     $requiredRepeatedUint64Value = [];
     *     $requiredRepeatedFloatValue = [];
     *     $requiredRepeatedDoubleValue = [];
     *     $requiredRepeatedStringValue = [];
     *     $requiredRepeatedBoolValue = [];
     *     $requiredRepeatedBytesValue = [];
     *     $response = $libraryServiceClient->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $formattedRequiredSingularResourceName, $formattedRequiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param int            $requiredSingularInt32
     * @param int            $requiredSingularInt64
     * @param float          $requiredSingularFloat
     * @param float          $requiredSingularDouble
     * @param bool           $requiredSingularBool
     * @param int            $requiredSingularEnum               For allowed values, use constants defined on {@see \Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     * @param string         $requiredSingularString
     * @param string         $requiredSingularBytes
     * @param InnerMessage   $requiredSingularMessage
     * @param string         $requiredSingularResourceName
     * @param string         $requiredSingularResourceNameOneof
     * @param string         $requiredSingularResourceNameCommon
     * @param int            $requiredSingularFixed32
     * @param int            $requiredSingularFixed64
     * @param int[]          $requiredRepeatedInt32
     * @param int[]          $requiredRepeatedInt64
     * @param float[]        $requiredRepeatedFloat
     * @param float[]        $requiredRepeatedDouble
     * @param bool[]         $requiredRepeatedBool
     * @param int[]          $requiredRepeatedEnum               For allowed values, use constants defined on {@see \Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     * @param string[]       $requiredRepeatedString
     * @param string[]       $requiredRepeatedBytes
     * @param InnerMessage[] $requiredRepeatedMessage
     * @param string[]       $requiredRepeatedResourceName
     * @param string[]       $requiredRepeatedResourceNameOneof
     * @param string[]       $requiredRepeatedResourceNameCommon
     * @param int[]          $requiredRepeatedFixed32
     * @param int[]          $requiredRepeatedFixed64
     * @param array          $requiredMap
     * @param Any            $requiredAnyValue
     * @param Struct         $requiredStructValue
     * @param Value          $requiredValueValue
     * @param ListValue      $requiredListValueValue
     * @param Timestamp      $requiredTimeValue
     * @param Duration       $requiredDurationValue
     * @param FieldMask      $requiredFieldMaskValue
     * @param Int32Value     $requiredInt32Value
     * @param UInt32Value    $requiredUint32Value
     * @param Int64Value     $requiredInt64Value
     * @param UInt64Value    $requiredUint64Value
     * @param FloatValue     $requiredFloatValue
     * @param DoubleValue    $requiredDoubleValue
     * @param StringValue    $requiredStringValue
     * @param BoolValue      $requiredBoolValue
     * @param BytesValue     $requiredBytesValue
     * @param Any[]          $requiredRepeatedAnyValue
     * @param Struct[]       $requiredRepeatedStructValue
     * @param Value[]        $requiredRepeatedValueValue
     * @param ListValue[]    $requiredRepeatedListValueValue
     * @param Timestamp[]    $requiredRepeatedTimeValue
     * @param Duration[]     $requiredRepeatedDurationValue
     * @param FieldMask[]    $requiredRepeatedFieldMaskValue
     * @param Int32Value[]   $requiredRepeatedInt32Value
     * @param UInt32Value[]  $requiredRepeatedUint32Value
     * @param Int64Value[]   $requiredRepeatedInt64Value
     * @param UInt64Value[]  $requiredRepeatedUint64Value
     * @param FloatValue[]   $requiredRepeatedFloatValue
     * @param DoubleValue[]  $requiredRepeatedDoubleValue
     * @param StringValue[]  $requiredRepeatedStringValue
     * @param BoolValue[]    $requiredRepeatedBoolValue
     * @param BytesValue[]   $requiredRepeatedBytesValue
     * @param array          $optionalArgs                       {
     *     Optional.
     *
     *     @type int $optionalSingularInt32
     *     @type int $optionalSingularInt64
     *     @type float $optionalSingularFloat
     *     @type float $optionalSingularDouble
     *     @type bool $optionalSingularBool
     *     @type int $optionalSingularEnum
     *           For allowed values, use constants defined on {@see \Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     *     @type string $optionalSingularString
     *     @type string $optionalSingularBytes
     *     @type InnerMessage $optionalSingularMessage
     *     @type string $optionalSingularResourceName
     *     @type string $optionalSingularResourceNameOneof
     *     @type string $optionalSingularResourceNameCommon
     *     @type int $optionalSingularFixed32
     *     @type int $optionalSingularFixed64
     *     @type int[] $optionalRepeatedInt32
     *     @type int[] $optionalRepeatedInt64
     *     @type float[] $optionalRepeatedFloat
     *     @type float[] $optionalRepeatedDouble
     *     @type bool[] $optionalRepeatedBool
     *     @type int[] $optionalRepeatedEnum
     *           For allowed values, use constants defined on {@see \Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     *     @type string[] $optionalRepeatedString
     *     @type string[] $optionalRepeatedBytes
     *     @type InnerMessage[] $optionalRepeatedMessage
     *     @type string[] $optionalRepeatedResourceName
     *     @type string[] $optionalRepeatedResourceNameOneof
     *     @type string[] $optionalRepeatedResourceNameCommon
     *     @type int[] $optionalRepeatedFixed32
     *     @type int[] $optionalRepeatedFixed64
     *     @type array $optionalMap
     *     @type Any $anyValue
     *     @type Struct $structValue
     *     @type Value $valueValue
     *     @type ListValue $listValueValue
     *     @type Timestamp $timeValue
     *     @type Duration $durationValue
     *     @type FieldMask $fieldMaskValue
     *     @type Int32Value $int32Value
     *     @type UInt32Value $uint32Value
     *     @type Int64Value $int64Value
     *     @type UInt64Value $uint64Value
     *     @type FloatValue $floatValue
     *     @type DoubleValue $doubleValue
     *     @type StringValue $stringValue
     *     @type BoolValue $boolValue
     *     @type BytesValue $bytesValue
     *     @type Any[] $repeatedAnyValue
     *     @type Struct[] $repeatedStructValue
     *     @type Value[] $repeatedValueValue
     *     @type ListValue[] $repeatedListValueValue
     *     @type Timestamp[] $repeatedTimeValue
     *     @type Duration[] $repeatedDurationValue
     *     @type FieldMask[] $repeatedFieldMaskValue
     *     @type Int32Value[] $repeatedInt32Value
     *     @type UInt32Value[] $repeatedUint32Value
     *     @type Int64Value[] $repeatedInt64Value
     *     @type UInt64Value[] $repeatedUint64Value
     *     @type FloatValue[] $repeatedFloatValue
     *     @type DoubleValue[] $repeatedDoubleValue
     *     @type StringValue[] $repeatedStringValue
     *     @type BoolValue[] $repeatedBoolValue
     *     @type BytesValue[] $repeatedBytesValue
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\TestOptionalRequiredFlatteningParamsResponse
     *
     * @throws ApiException if the remote call fails
     */
    public function testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $requiredRepeatedResourceName, $requiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue, array $optionalArgs = [])
    {
        $request = new TestOptionalRequiredFlatteningParamsRequest();
        $request->setRequiredSingularInt32($requiredSingularInt32);
        $request->setRequiredSingularInt64($requiredSingularInt64);
        $request->setRequiredSingularFloat($requiredSingularFloat);
        $request->setRequiredSingularDouble($requiredSingularDouble);
        $request->setRequiredSingularBool($requiredSingularBool);
        $request->setRequiredSingularEnum($requiredSingularEnum);
        $request->setRequiredSingularString($requiredSingularString);
        $request->setRequiredSingularBytes($requiredSingularBytes);
        $request->setRequiredSingularMessage($requiredSingularMessage);
        $request->setRequiredSingularResourceName($requiredSingularResourceName);
        $request->setRequiredSingularResourceNameOneof($requiredSingularResourceNameOneof);
        $request->setRequiredSingularResourceNameCommon($requiredSingularResourceNameCommon);
        $request->setRequiredSingularFixed32($requiredSingularFixed32);
        $request->setRequiredSingularFixed64($requiredSingularFixed64);
        $request->setRequiredRepeatedInt32($requiredRepeatedInt32);
        $request->setRequiredRepeatedInt64($requiredRepeatedInt64);
        $request->setRequiredRepeatedFloat($requiredRepeatedFloat);
        $request->setRequiredRepeatedDouble($requiredRepeatedDouble);
        $request->setRequiredRepeatedBool($requiredRepeatedBool);
        $request->setRequiredRepeatedEnum($requiredRepeatedEnum);
        $request->setRequiredRepeatedString($requiredRepeatedString);
        $request->setRequiredRepeatedBytes($requiredRepeatedBytes);
        $request->setRequiredRepeatedMessage($requiredRepeatedMessage);
        $request->setRequiredRepeatedResourceName($requiredRepeatedResourceName);
        $request->setRequiredRepeatedResourceNameOneof($requiredRepeatedResourceNameOneof);
        $request->setRequiredRepeatedResourceNameCommon($requiredRepeatedResourceNameCommon);
        $request->setRequiredRepeatedFixed32($requiredRepeatedFixed32);
        $request->setRequiredRepeatedFixed64($requiredRepeatedFixed64);
        $request->setRequiredMap($requiredMap);
        $request->setRequiredAnyValue($requiredAnyValue);
        $request->setRequiredStructValue($requiredStructValue);
        $request->setRequiredValueValue($requiredValueValue);
        $request->setRequiredListValueValue($requiredListValueValue);
        $request->setRequiredTimeValue($requiredTimeValue);
        $request->setRequiredDurationValue($requiredDurationValue);
        $request->setRequiredFieldMaskValue($requiredFieldMaskValue);
        $request->setRequiredInt32Value($requiredInt32Value);
        $request->setRequiredUint32Value($requiredUint32Value);
        $request->setRequiredInt64Value($requiredInt64Value);
        $request->setRequiredUint64Value($requiredUint64Value);
        $request->setRequiredFloatValue($requiredFloatValue);
        $request->setRequiredDoubleValue($requiredDoubleValue);
        $request->setRequiredStringValue($requiredStringValue);
        $request->setRequiredBoolValue($requiredBoolValue);
        $request->setRequiredBytesValue($requiredBytesValue);
        $request->setRequiredRepeatedAnyValue($requiredRepeatedAnyValue);
        $request->setRequiredRepeatedStructValue($requiredRepeatedStructValue);
        $request->setRequiredRepeatedValueValue($requiredRepeatedValueValue);
        $request->setRequiredRepeatedListValueValue($requiredRepeatedListValueValue);
        $request->setRequiredRepeatedTimeValue($requiredRepeatedTimeValue);
        $request->setRequiredRepeatedDurationValue($requiredRepeatedDurationValue);
        $request->setRequiredRepeatedFieldMaskValue($requiredRepeatedFieldMaskValue);
        $request->setRequiredRepeatedInt32Value($requiredRepeatedInt32Value);
        $request->setRequiredRepeatedUint32Value($requiredRepeatedUint32Value);
        $request->setRequiredRepeatedInt64Value($requiredRepeatedInt64Value);
        $request->setRequiredRepeatedUint64Value($requiredRepeatedUint64Value);
        $request->setRequiredRepeatedFloatValue($requiredRepeatedFloatValue);
        $request->setRequiredRepeatedDoubleValue($requiredRepeatedDoubleValue);
        $request->setRequiredRepeatedStringValue($requiredRepeatedStringValue);
        $request->setRequiredRepeatedBoolValue($requiredRepeatedBoolValue);
        $request->setRequiredRepeatedBytesValue($requiredRepeatedBytesValue);
        if (isset($optionalArgs['optionalSingularInt32'])) {
            $request->setOptionalSingularInt32($optionalArgs['optionalSingularInt32']);
        }

        if (isset($optionalArgs['optionalSingularInt64'])) {
            $request->setOptionalSingularInt64($optionalArgs['optionalSingularInt64']);
        }

        if (isset($optionalArgs['optionalSingularFloat'])) {
            $request->setOptionalSingularFloat($optionalArgs['optionalSingularFloat']);
        }

        if (isset($optionalArgs['optionalSingularDouble'])) {
            $request->setOptionalSingularDouble($optionalArgs['optionalSingularDouble']);
        }

        if (isset($optionalArgs['optionalSingularBool'])) {
            $request->setOptionalSingularBool($optionalArgs['optionalSingularBool']);
        }

        if (isset($optionalArgs['optionalSingularEnum'])) {
            $request->setOptionalSingularEnum($optionalArgs['optionalSingularEnum']);
        }

        if (isset($optionalArgs['optionalSingularString'])) {
            $request->setOptionalSingularString($optionalArgs['optionalSingularString']);
        }

        if (isset($optionalArgs['optionalSingularBytes'])) {
            $request->setOptionalSingularBytes($optionalArgs['optionalSingularBytes']);
        }

        if (isset($optionalArgs['optionalSingularMessage'])) {
            $request->setOptionalSingularMessage($optionalArgs['optionalSingularMessage']);
        }

        if (isset($optionalArgs['optionalSingularResourceName'])) {
            $request->setOptionalSingularResourceName($optionalArgs['optionalSingularResourceName']);
        }

        if (isset($optionalArgs['optionalSingularResourceNameOneof'])) {
            $request->setOptionalSingularResourceNameOneof($optionalArgs['optionalSingularResourceNameOneof']);
        }

        if (isset($optionalArgs['optionalSingularResourceNameCommon'])) {
            $request->setOptionalSingularResourceNameCommon($optionalArgs['optionalSingularResourceNameCommon']);
        }

        if (isset($optionalArgs['optionalSingularFixed32'])) {
            $request->setOptionalSingularFixed32($optionalArgs['optionalSingularFixed32']);
        }

        if (isset($optionalArgs['optionalSingularFixed64'])) {
            $request->setOptionalSingularFixed64($optionalArgs['optionalSingularFixed64']);
        }

        if (isset($optionalArgs['optionalRepeatedInt32'])) {
            $request->setOptionalRepeatedInt32($optionalArgs['optionalRepeatedInt32']);
        }

        if (isset($optionalArgs['optionalRepeatedInt64'])) {
            $request->setOptionalRepeatedInt64($optionalArgs['optionalRepeatedInt64']);
        }

        if (isset($optionalArgs['optionalRepeatedFloat'])) {
            $request->setOptionalRepeatedFloat($optionalArgs['optionalRepeatedFloat']);
        }

        if (isset($optionalArgs['optionalRepeatedDouble'])) {
            $request->setOptionalRepeatedDouble($optionalArgs['optionalRepeatedDouble']);
        }

        if (isset($optionalArgs['optionalRepeatedBool'])) {
            $request->setOptionalRepeatedBool($optionalArgs['optionalRepeatedBool']);
        }

        if (isset($optionalArgs['optionalRepeatedEnum'])) {
            $request->setOptionalRepeatedEnum($optionalArgs['optionalRepeatedEnum']);
        }

        if (isset($optionalArgs['optionalRepeatedString'])) {
            $request->setOptionalRepeatedString($optionalArgs['optionalRepeatedString']);
        }

        if (isset($optionalArgs['optionalRepeatedBytes'])) {
            $request->setOptionalRepeatedBytes($optionalArgs['optionalRepeatedBytes']);
        }

        if (isset($optionalArgs['optionalRepeatedMessage'])) {
            $request->setOptionalRepeatedMessage($optionalArgs['optionalRepeatedMessage']);
        }

        if (isset($optionalArgs['optionalRepeatedResourceName'])) {
            $request->setOptionalRepeatedResourceName($optionalArgs['optionalRepeatedResourceName']);
        }

        if (isset($optionalArgs['optionalRepeatedResourceNameOneof'])) {
            $request->setOptionalRepeatedResourceNameOneof($optionalArgs['optionalRepeatedResourceNameOneof']);
        }

        if (isset($optionalArgs['optionalRepeatedResourceNameCommon'])) {
            $request->setOptionalRepeatedResourceNameCommon($optionalArgs['optionalRepeatedResourceNameCommon']);
        }

        if (isset($optionalArgs['optionalRepeatedFixed32'])) {
            $request->setOptionalRepeatedFixed32($optionalArgs['optionalRepeatedFixed32']);
        }

        if (isset($optionalArgs['optionalRepeatedFixed64'])) {
            $request->setOptionalRepeatedFixed64($optionalArgs['optionalRepeatedFixed64']);
        }

        if (isset($optionalArgs['optionalMap'])) {
            $request->setOptionalMap($optionalArgs['optionalMap']);
        }

        if (isset($optionalArgs['anyValue'])) {
            $request->setAnyValue($optionalArgs['anyValue']);
        }

        if (isset($optionalArgs['structValue'])) {
            $request->setStructValue($optionalArgs['structValue']);
        }

        if (isset($optionalArgs['valueValue'])) {
            $request->setValueValue($optionalArgs['valueValue']);
        }

        if (isset($optionalArgs['listValueValue'])) {
            $request->setListValueValue($optionalArgs['listValueValue']);
        }

        if (isset($optionalArgs['timeValue'])) {
            $request->setTimeValue($optionalArgs['timeValue']);
        }

        if (isset($optionalArgs['durationValue'])) {
            $request->setDurationValue($optionalArgs['durationValue']);
        }

        if (isset($optionalArgs['fieldMaskValue'])) {
            $request->setFieldMaskValue($optionalArgs['fieldMaskValue']);
        }

        if (isset($optionalArgs['int32Value'])) {
            $request->setInt32Value($optionalArgs['int32Value']);
        }

        if (isset($optionalArgs['uint32Value'])) {
            $request->setUint32Value($optionalArgs['uint32Value']);
        }

        if (isset($optionalArgs['int64Value'])) {
            $request->setInt64Value($optionalArgs['int64Value']);
        }

        if (isset($optionalArgs['uint64Value'])) {
            $request->setUint64Value($optionalArgs['uint64Value']);
        }

        if (isset($optionalArgs['floatValue'])) {
            $request->setFloatValue($optionalArgs['floatValue']);
        }

        if (isset($optionalArgs['doubleValue'])) {
            $request->setDoubleValue($optionalArgs['doubleValue']);
        }

        if (isset($optionalArgs['stringValue'])) {
            $request->setStringValue($optionalArgs['stringValue']);
        }

        if (isset($optionalArgs['boolValue'])) {
            $request->setBoolValue($optionalArgs['boolValue']);
        }

        if (isset($optionalArgs['bytesValue'])) {
            $request->setBytesValue($optionalArgs['bytesValue']);
        }

        if (isset($optionalArgs['repeatedAnyValue'])) {
            $request->setRepeatedAnyValue($optionalArgs['repeatedAnyValue']);
        }

        if (isset($optionalArgs['repeatedStructValue'])) {
            $request->setRepeatedStructValue($optionalArgs['repeatedStructValue']);
        }

        if (isset($optionalArgs['repeatedValueValue'])) {
            $request->setRepeatedValueValue($optionalArgs['repeatedValueValue']);
        }

        if (isset($optionalArgs['repeatedListValueValue'])) {
            $request->setRepeatedListValueValue($optionalArgs['repeatedListValueValue']);
        }

        if (isset($optionalArgs['repeatedTimeValue'])) {
            $request->setRepeatedTimeValue($optionalArgs['repeatedTimeValue']);
        }

        if (isset($optionalArgs['repeatedDurationValue'])) {
            $request->setRepeatedDurationValue($optionalArgs['repeatedDurationValue']);
        }

        if (isset($optionalArgs['repeatedFieldMaskValue'])) {
            $request->setRepeatedFieldMaskValue($optionalArgs['repeatedFieldMaskValue']);
        }

        if (isset($optionalArgs['repeatedInt32Value'])) {
            $request->setRepeatedInt32Value($optionalArgs['repeatedInt32Value']);
        }

        if (isset($optionalArgs['repeatedUint32Value'])) {
            $request->setRepeatedUint32Value($optionalArgs['repeatedUint32Value']);
        }

        if (isset($optionalArgs['repeatedInt64Value'])) {
            $request->setRepeatedInt64Value($optionalArgs['repeatedInt64Value']);
        }

        if (isset($optionalArgs['repeatedUint64Value'])) {
            $request->setRepeatedUint64Value($optionalArgs['repeatedUint64Value']);
        }

        if (isset($optionalArgs['repeatedFloatValue'])) {
            $request->setRepeatedFloatValue($optionalArgs['repeatedFloatValue']);
        }

        if (isset($optionalArgs['repeatedDoubleValue'])) {
            $request->setRepeatedDoubleValue($optionalArgs['repeatedDoubleValue']);
        }

        if (isset($optionalArgs['repeatedStringValue'])) {
            $request->setRepeatedStringValue($optionalArgs['repeatedStringValue']);
        }

        if (isset($optionalArgs['repeatedBoolValue'])) {
            $request->setRepeatedBoolValue($optionalArgs['repeatedBoolValue']);
        }

        if (isset($optionalArgs['repeatedBytesValue'])) {
            $request->setRepeatedBytesValue($optionalArgs['repeatedBytesValue']);
        }

        return $this->startCall('TestOptionalRequiredFlatteningParams', TestOptionalRequiredFlatteningParamsResponse::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->updateBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to update.
     * @param Book   $book         The book to update with.
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type string $optionalFoo
     *           An optional foo.
     *     @type FieldMask $updateMask
     *           A field mask to apply, rendered as an HTTP parameter.
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Testing\BasicDiregapic\Book
     *
     * @throws ApiException if the remote call fails
     */
    public function updateBook($name, $book, array $optionalArgs = [])
    {
        $request = new UpdateBookRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setBook($book);
        $requestParamHeaders['name'] = $name;
        if (isset($optionalArgs['optionalFoo'])) {
            $request->setOptionalFoo($optionalArgs['optionalFoo']);
        }

        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }

        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateBook', Book::class, $optionalArgs, $request)->wait();
    }

    /**
     * Updates the index of a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->bookName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $indexName = 'index_name';
     *     $indexMap = [];
     *     $libraryServiceClient->updateBookIndex($formattedName, $indexName, $indexMap);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name         The name of the book to update.
     * @param string $indexName    The name of the index for the book
     * @param array  $indexMap     The index to update the book with
     * @param array  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a
     *           {@see Google\ApiCore\RetrySettings} object, or an associative array of retry
     *           settings parameters. See the documentation on
     *           {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     */
    public function updateBookIndex($name, $indexName, $indexMap, array $optionalArgs = [])
    {
        $request = new UpdateBookIndexRequest();
        $requestParamHeaders = [];
        $request->setName($name);
        $request->setIndexName($indexName);
        $request->setIndexMap($indexMap);
        $requestParamHeaders['name'] = $name;
        $requestParams = new RequestParamsHeaderDescriptor($requestParamHeaders);
        $optionalArgs['headers'] = isset($optionalArgs['headers']) ? array_merge($requestParams->getHeader(), $optionalArgs['headers']) : $requestParams->getHeader();
        return $this->startCall('UpdateBookIndex', GPBEmpty::class, $optionalArgs, $request)->wait();
    }
}
