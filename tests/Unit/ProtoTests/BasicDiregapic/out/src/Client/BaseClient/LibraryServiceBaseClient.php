<?php
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/tests/Unit/ProtoTests/BasicDiregapic/library_rest.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Testing\BasicDiregapic\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Operation;
use Testing\BasicDiregapic\AddCommentsRequest;
use Testing\BasicDiregapic\AddTagRequest;
use Testing\BasicDiregapic\AddTagResponse;
use Testing\BasicDiregapic\ArchiveBooksRequest;
use Testing\BasicDiregapic\ArchiveBooksResponse;
use Testing\BasicDiregapic\BookFromAnywhereResponse;
use Testing\BasicDiregapic\BookFromArchiveResponse;
use Testing\BasicDiregapic\BookResponse;
use Testing\BasicDiregapic\Comment;
use Testing\BasicDiregapic\CreateBookRequest;
use Testing\BasicDiregapic\CreateInventoryRequest;
use Testing\BasicDiregapic\CreateShelfRequest;
use Testing\BasicDiregapic\DeleteBookRequest;
use Testing\BasicDiregapic\DeleteShelfRequest;
use Testing\BasicDiregapic\FindRelatedBooksRequest;
use Testing\BasicDiregapic\GetBookFromAbsolutelyAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromAnywhereRequest;
use Testing\BasicDiregapic\GetBookFromArchiveRequest;
use Testing\BasicDiregapic\GetBookRequest;
use Testing\BasicDiregapic\GetShelfRequest;
use Testing\BasicDiregapic\InventoryResponse;
use Testing\BasicDiregapic\ListAggregatedShelvesRequest;
use Testing\BasicDiregapic\ListBooksRequest;
use Testing\BasicDiregapic\ListShelvesRequest;
use Testing\BasicDiregapic\ListShelvesResponse;
use Testing\BasicDiregapic\ListStringsRequest;
use Testing\BasicDiregapic\MergeShelvesRequest;
use Testing\BasicDiregapic\MoveBookRequest;
use Testing\BasicDiregapic\MoveBooksRequest;
use Testing\BasicDiregapic\MoveBooksResponse;
use Testing\BasicDiregapic\PublishSeriesRequest;
use Testing\BasicDiregapic\PublishSeriesResponse;
use Testing\BasicDiregapic\ShelfResponse;
use Testing\BasicDiregapic\UpdateBookIndexRequest;
use Testing\BasicDiregapic\UpdateBookRequest;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and BookResponse resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of
 * [ShelfResponse][google.example.library.v1.ShelfResponse]
 * resources, named ``bookShelves/*``
 *
 * - Each ShelfResponse has a collection of
 * [BookResponse][google.example.library.v1.BookResponse]
 * resources, named `bookShelves/&#42;/books/*`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'&#64;.
 *
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 */
class LibraryServiceBaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.example.library.v1.LibraryService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'library-example.googleapis.com:1234';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/library_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/library_service_descriptor_config.php',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
                'useJwtAccessWithScope' => false,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/library_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /** Implements GapicClientTrait::defaultTransport. */
    private static function defaultTransport()
    {
        return 'rest';
    }

    /** Implements GapicClientTrait::getSupportedTransports. */
    private static function getSupportedTransports()
    {
        return [
            'rest',
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a archive
     * resource.
     *
     * @param string $archive
     *
     * @return string The formatted archive resource.
     */
    public static function archiveName($archive)
    {
        return self::getPathTemplate('archive')->render([
            'archive' => $archive,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a archive_book
     * resource.
     *
     * @param string $archive
     * @param string $book
     *
     * @return string The formatted archive_book resource.
     */
    public static function archiveBookName($archive, $book)
    {
        return self::getPathTemplate('archiveBook')->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * archived_book resource.
     *
     * @param string $archive
     * @param string $book
     *
     * @return string The formatted archived_book resource.
     */
    public static function archivedBookName($archive, $book)
    {
        return self::getPathTemplate('archivedBook')->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a book
     * resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     *
     * @return string The formatted book resource.
     */
    public static function bookName($shelf, $bookOne, $bookTwo)
    {
        return self::getPathTemplate('book')->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a folder
     * resource.
     *
     * @param string $folder
     *
     * @return string The formatted folder resource.
     */
    public static function folderName($folder)
    {
        return self::getPathTemplate('folder')->render([
            'folder' => $folder,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a inventory
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     *
     * @return string The formatted inventory resource.
     */
    public static function inventoryName($project, $location, $publisher)
    {
        return self::getPathTemplate('inventory')->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName($project, $location)
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_reader resource.
     *
     * @param string $organization
     *
     * @return string The formatted organization_reader resource.
     */
    public static function organizationReaderName($organization)
    {
        return self::getPathTemplate('organizationReader')->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getPathTemplate('project')->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project_book
     * resource.
     *
     * @param string $project
     * @param string $book
     *
     * @return string The formatted project_book resource.
     */
    public static function projectBookName($project, $book)
    {
        return self::getPathTemplate('projectBook')->render([
            'project' => $project,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_location_publisher_book resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     * @param string $book
     *
     * @return string The formatted project_location_publisher_book resource.
     */
    public static function projectLocationPublisherBookName($project, $location, $publisher, $book)
    {
        return self::getPathTemplate('projectLocationPublisherBook')->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_reader resource.
     *
     * @param string $project
     * @param string $reader
     *
     * @return string The formatted project_reader resource.
     */
    public static function projectReaderName($project, $reader)
    {
        return self::getPathTemplate('projectReader')->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_shelf_reader_surname_reader_first_name resource.
     *
     * @param string $project
     * @param string $shelf
     * @param string $readerSurname
     * @param string $readerFirstName
     *
     * @return string The formatted project_shelf_reader_surname_reader_first_name resource.
     */
    public static function projectShelfReaderSurnameReaderFirstNameName($project, $shelf, $readerSurname, $readerFirstName)
    {
        return self::getPathTemplate('projectShelfReaderSurnameReaderFirstName')->render([
            'project' => $project,
            'shelf' => $shelf,
            'reader_surname' => $readerSurname,
            'reader_first_name' => $readerFirstName,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a publisher
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     *
     * @return string The formatted publisher resource.
     */
    public static function publisherName($project, $location, $publisher)
    {
        return self::getPathTemplate('publisher')->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a reader
     * resource.
     *
     * @param string $project
     * @param string $reader
     *
     * @return string The formatted reader resource.
     */
    public static function readerName($project, $reader)
    {
        return self::getPathTemplate('reader')->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a shelf
     * resource.
     *
     * @param string $shelf
     *
     * @return string The formatted shelf resource.
     */
    public static function shelfName($shelf)
    {
        return self::getPathTemplate('shelf')->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * shelf_book_one_book_two resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     *
     * @return string The formatted shelf_book_one_book_two resource.
     */
    public static function shelfBookOneBookTwoName($shelf, $bookOne, $bookTwo)
    {
        return self::getPathTemplate('shelfBookOneBookTwo')->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    private static function registerPathTemplates()
    {
        self::loadPathTemplates(__DIR__ . '/../../resources/library_service_descriptor_config.php', self::SERVICE_NAME);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - archive: archives/{archive}
     * - archiveBook: archives/{archive}/books/{book}
     * - archivedBook: archives/{archive}/books/{book}
     * - book: shelves/{shelf}/books/{book_one}~{book_two}
     * - folder: folders/{folder}
     * - inventory: projects/{project}/locations/{location}/publishers/{publisher}/inventory
     * - location: projects/{project}/locations/{location}
     * - organizationReader: organization/{organization}/reader
     * - project: projects/{project}
     * - projectBook: projects/{project}/books/{book}
     * - projectLocationPublisherBook: projects/{project}/locations/{location}/publishers/{publisher}/inventory/books/{book}
     * - projectReader: projects/{project}/readers/{reader}
     * - projectShelfReaderSurnameReaderFirstName: projects/{project}/shelves/{shelf}/readers/{reader_surname}.{reader_first_name}
     * - publisher: projects/{project}/locations/{location}/publishers/{publisher}
     * - reader: projects/{project}/readers/{reader}
     * - shelf: shelves/{shelf}
     * - shelfBookOneBookTwo: shelves/{shelf}/books/{book_one}~{book_two}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'library-example.googleapis.com:1234:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, supports only
     *           `rest`. *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /**
     * Adds comments to a book
     *
     * @param AddCommentsRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function addComments(AddCommentsRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('AddComments', $request, $optionalArgs)->wait();
    }

    /**
     * Adds a tag to the book. This RPC is a mixin.
     *
     * @param AddTagRequest $request      A request to house fields associated with the call.
     * @param array         $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return AddTagResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function addTag(AddTagRequest $request, array $optionalArgs = []): AddTagResponse
    {
        return $this->startApiCall('AddTag', $request, $optionalArgs)->wait();
    }

    /**
     * @param ArchiveBooksRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ArchiveBooksResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function archiveBooks(ArchiveBooksRequest $request, array $optionalArgs = []): ArchiveBooksResponse
    {
        return $this->startApiCall('ArchiveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a book.
     *
     * @param CreateBookRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createBook(CreateBookRequest $request, array $optionalArgs = []): BookResponse
    {
        return $this->startApiCall('CreateBook', $request, $optionalArgs)->wait();
    }

    /**
     * Creates an inventory. Tests singleton resources.
     *
     * @param CreateInventoryRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return InventoryResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createInventory(CreateInventoryRequest $request, array $optionalArgs = []): InventoryResponse
    {
        return $this->startApiCall('CreateInventory', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     * RPC method comment may include special characters: <>&"`'&#64;.
     *
     * @param CreateShelfRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ShelfResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createShelf(CreateShelfRequest $request, array $optionalArgs = []): ShelfResponse
    {
        return $this->startApiCall('CreateShelf', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a book.
     *
     * @param DeleteBookRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteBook(DeleteBookRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteBook', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a shelf.
     *
     * @param DeleteShelfRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteShelf(DeleteShelfRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteShelf', $request, $optionalArgs)->wait();
    }

    /**
     * @param FindRelatedBooksRequest $request      A request to house fields associated with the call.
     * @param array                   $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function findRelatedBooks(FindRelatedBooksRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('FindRelatedBooks', $request, $optionalArgs);
    }

    /**
     * Test long-running operations
     *
     * @param GetBookRequest $request      A request to house fields associated with the call.
     * @param array          $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBigBook(GetBookRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('GetBigBook', $request, $optionalArgs)->wait();
    }

    /**
     * Test long-running operations with empty return type.
     *
     * @param GetBookRequest $request      A request to house fields associated with the call.
     * @param array          $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBigNothing(GetBookRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('GetBigNothing', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book.
     *
     * @param GetBookRequest $request      A request to house fields associated with the call.
     * @param array          $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBook(GetBookRequest $request, array $optionalArgs = []): BookResponse
    {
        return $this->startApiCall('GetBook', $request, $optionalArgs)->wait();
    }

    /**
     * Test proper OneOf-Any resource name mapping
     *
     * @param GetBookFromAbsolutelyAnywhereRequest $request      A request to house fields associated with the call.
     * @param array                                $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookFromAnywhereResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBookFromAbsolutelyAnywhere(GetBookFromAbsolutelyAnywhereRequest $request, array $optionalArgs = []): BookFromAnywhereResponse
    {
        return $this->startApiCall('GetBookFromAbsolutelyAnywhere', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book from a shelf or archive.
     *
     * @param GetBookFromAnywhereRequest $request      A request to house fields associated with the call.
     * @param array                      $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookFromAnywhereResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBookFromAnywhere(GetBookFromAnywhereRequest $request, array $optionalArgs = []): BookFromAnywhereResponse
    {
        return $this->startApiCall('GetBookFromAnywhere', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a book from an archive.
     *
     * @param GetBookFromArchiveRequest $request      A request to house fields associated with the call.
     * @param array                     $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookFromArchiveResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBookFromArchive(GetBookFromArchiveRequest $request, array $optionalArgs = []): BookFromArchiveResponse
    {
        return $this->startApiCall('GetBookFromArchive', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a shelf.
     *
     * @param GetShelfRequest $request      A request to house fields associated with the call.
     * @param array           $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ShelfResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getShelf(GetShelfRequest $request, array $optionalArgs = []): ShelfResponse
    {
        return $this->startApiCall('GetShelf', $request, $optionalArgs)->wait();
    }

    /**
     * Lists shelves.
     *
     * @param ListAggregatedShelvesRequest $request      A request to house fields associated with the call.
     * @param array                        $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listAggregatedShelves(ListAggregatedShelvesRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListAggregatedShelves', $request, $optionalArgs);
    }

    /**
     * Lists books in a shelf.
     *
     * @param ListBooksRequest $request      A request to house fields associated with the call.
     * @param array            $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listBooks(ListBooksRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListBooks', $request, $optionalArgs);
    }

    /**
     * Lists shelves.
     *
     * @param ListShelvesRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ListShelvesResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listShelves(ListShelvesRequest $request, array $optionalArgs = []): ListShelvesResponse
    {
        return $this->startApiCall('ListShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * @param ListStringsRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listStrings(ListStringsRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListStrings', $request, $optionalArgs);
    }

    /**
     * @param ArchiveBooksRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function longRunningArchiveBooks(ArchiveBooksRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('LongRunningArchiveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * @param MergeShelvesRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ShelfResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function mergeShelves(MergeShelvesRequest $request, array $optionalArgs = []): ShelfResponse
    {
        return $this->startApiCall('MergeShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * @param MoveBookRequest $request      A request to house fields associated with the call.
     * @param array           $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function moveBook(MoveBookRequest $request, array $optionalArgs = []): BookResponse
    {
        return $this->startApiCall('MoveBook', $request, $optionalArgs)->wait();
    }

    /**
     * @param MoveBooksRequest $request      A request to house fields associated with the call.
     * @param array            $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return MoveBooksResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function moveBooks(MoveBooksRequest $request, array $optionalArgs = []): MoveBooksResponse
    {
        return $this->startApiCall('MoveBooks', $request, $optionalArgs)->wait();
    }

    /**
     * This method is not exposed in the GAPIC config. It should be generated.
     *
     * @param ListShelvesRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function privateListShelves(ListShelvesRequest $request, array $optionalArgs = []): BookResponse
    {
        return $this->startApiCall('PrivateListShelves', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a series of books.
     * Tests PHP required nested fields.
     *
     * @param PublishSeriesRequest $request      A request to house fields associated with the call.
     * @param array                $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PublishSeriesResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function publishSeries(PublishSeriesRequest $request, array $optionalArgs = []): PublishSeriesResponse
    {
        return $this->startApiCall('PublishSeries', $request, $optionalArgs)->wait();
    }

    /**
     * Test using resource messages as request objects. Only used by PubSub
     * (CreateSubscription) for historical reasons. New APIs should always create
     * a separate message for a request.
     *
     * @param BookResponse $request      A request to house fields associated with the call.
     * @param array        $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function saveBook(BookResponse $request, array $optionalArgs = []): void
    {
        $this->startApiCall('SaveBook', $request, $optionalArgs)->wait();
    }

    /**
     * Updates a book.
     *
     * @param UpdateBookRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BookResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateBook(UpdateBookRequest $request, array $optionalArgs = []): BookResponse
    {
        return $this->startApiCall('UpdateBook', $request, $optionalArgs)->wait();
    }

    /**
     * Updates the index of a book.
     *
     * @param UpdateBookIndexRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateBookIndex(UpdateBookIndexRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('UpdateBookIndex', $request, $optionalArgs)->wait();
    }
}
