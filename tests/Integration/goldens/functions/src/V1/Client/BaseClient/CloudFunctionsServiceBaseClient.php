<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/cloud/functions/v1/functions.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Functions\V1\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Functions\V1\CallFunctionRequest;
use Google\Cloud\Functions\V1\CallFunctionResponse;
use Google\Cloud\Functions\V1\CloudFunction;
use Google\Cloud\Functions\V1\CreateFunctionRequest;
use Google\Cloud\Functions\V1\DeleteFunctionRequest;
use Google\Cloud\Functions\V1\GenerateDownloadUrlRequest;
use Google\Cloud\Functions\V1\GenerateDownloadUrlResponse;
use Google\Cloud\Functions\V1\GenerateUploadUrlRequest;
use Google\Cloud\Functions\V1\GenerateUploadUrlResponse;
use Google\Cloud\Functions\V1\GetFunctionRequest;
use Google\Cloud\Functions\V1\ListFunctionsRequest;
use Google\Cloud\Functions\V1\UpdateFunctionRequest;
use Google\Cloud\Iam\V1\GetIamPolicyRequest;
use Google\Cloud\Iam\V1\Policy;
use Google\Cloud\Iam\V1\SetIamPolicyRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsRequest;
use Google\Cloud\Iam\V1\TestIamPermissionsResponse;
use Google\LongRunning\Operation;

/**
 * Service Description: A service that application uses to manipulate triggers and functions.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @method GuzzleHttp\Promise\PromiseInterface callFunctionAsync(\Google\Cloud\Functions\V1\CallFunctionRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface createFunctionAsync(\Google\Cloud\Functions\V1\CreateFunctionRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface deleteFunctionAsync(\Google\Cloud\Functions\V1\DeleteFunctionRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface generateDownloadUrlAsync(\Google\Cloud\Functions\V1\GenerateDownloadUrlRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface generateUploadUrlAsync(\Google\Cloud\Functions\V1\GenerateUploadUrlRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface getFunctionAsync(\Google\Cloud\Functions\V1\GetFunctionRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface getIamPolicyAsync(\Google\Cloud\Iam\V1\GetIamPolicyRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface listFunctionsAsync(\Google\Cloud\Functions\V1\ListFunctionsRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface setIamPolicyAsync(\Google\Cloud\Iam\V1\SetIamPolicyRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface testIamPermissionsAsync(\Google\Cloud\Iam\V1\TestIamPermissionsRequest $request, array $optionalArgs = [])
 *
 * @method GuzzleHttp\Promise\PromiseInterface updateFunctionAsync(\Google\Cloud\Functions\V1\UpdateFunctionRequest $request, array $optionalArgs = [])
 */
class CloudFunctionsServiceBaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.cloud.functions.v1.CloudFunctionsService';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'cloudfunctions.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
    ];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/cloud_functions_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/cloud_functions_service_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../../resources/cloud_functions_service_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/cloud_functions_service_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * cloud_function resource.
     *
     * @param string $project
     * @param string $location
     * @param string $function
     *
     * @return string The formatted cloud_function resource.
     */
    public static function cloudFunctionName($project, $location, $function)
    {
        return self::getPathTemplate('cloudFunction')->render([
            'project' => $project,
            'location' => $location,
            'function' => $function,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName($project, $location)
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    private static function registerPathTemplates()
    {
        self::loadPathTemplates(__DIR__ . '/../../resources/cloud_functions_service_descriptor_config.php', self::SERVICE_NAME);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - cloudFunction: projects/{project}/locations/{location}/functions/{function}
     * - location: projects/{project}/locations/{location}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'cloudfunctions.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            throw new ValidationException("Method name $method does not exist");
        }

        if (count($args) < 1) {
            throw new ValidationException("Async methods require a request message");
        }

        $rpcName = substr($method, 0, -5);
        $request = $args[0];
        $optionalArgs = $args[1] ?? [];
        return $this->startAsyncCall($rpcName, $request, $optionalArgs);
    }

    /**
     * Synchronously invokes a deployed Cloud Function. To be used for testing
     * purposes as very limited traffic is allowed. For more information on
     * the actual limits, refer to
     * [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
     *
     * The async variant is {@see self::callFunctionAsync()} .
     *
     * @param CallFunctionRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CallFunctionResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function callFunction(CallFunctionRequest $request, array $optionalArgs = []): CallFunctionResponse
    {
        return $this->startApiCall('CallFunction', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a new function. If a function with the given name already exists in
     * the specified project, the long running operation will return
     * `ALREADY_EXISTS` error.
     *
     * The async variant is {@see self::createFunctionAsync()} .
     *
     * @param CreateFunctionRequest $request      A request to house fields associated with the call.
     * @param array                 $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createFunction(CreateFunctionRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('CreateFunction', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a function with the given name from the specified project. If the
     * given function is used by some trigger, the trigger will be updated to
     * remove this function.
     *
     * The async variant is {@see self::deleteFunctionAsync()} .
     *
     * @param DeleteFunctionRequest $request      A request to house fields associated with the call.
     * @param array                 $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteFunction(DeleteFunctionRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('DeleteFunction', $request, $optionalArgs)->wait();
    }

    /**
     * Returns a signed URL for downloading deployed function source code.
     * The URL is only valid for a limited period and should be used within
     * minutes after generation.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls
     *
     * The async variant is {@see self::generateDownloadUrlAsync()} .
     *
     * @param GenerateDownloadUrlRequest $request      A request to house fields associated with the call.
     * @param array                      $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return GenerateDownloadUrlResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function generateDownloadUrl(GenerateDownloadUrlRequest $request, array $optionalArgs = []): GenerateDownloadUrlResponse
    {
        return $this->startApiCall('GenerateDownloadUrl', $request, $optionalArgs)->wait();
    }

    /**
     * Returns a signed URL for uploading a function source code.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls.
     * Once the function source code upload is complete, the used signed
     * URL should be provided in CreateFunction or UpdateFunction request
     * as a reference to the function source code.
     *
     * When uploading source code to the generated signed URL, please follow
     * these restrictions:
     *
     * * Source file type should be a zip file.
     * * Source file size should not exceed 100MB limit.
     * * No credentials should be attached - the signed URLs provide access to the
     * target bucket using internal service identity; if credentials were
     * attached, the identity from the credentials would be used, but that
     * identity does not have permissions to upload files to the URL.
     *
     * When making a HTTP PUT request, these two headers need to be specified:
     *
     * * `content-type: application/zip`
     * * `x-goog-content-length-range: 0,104857600`
     *
     * And this header SHOULD NOT be specified:
     *
     * * `Authorization: Bearer YOUR_TOKEN`
     *
     * The async variant is {@see self::generateUploadUrlAsync()} .
     *
     * @param GenerateUploadUrlRequest $request      A request to house fields associated with the call.
     * @param array                    $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return GenerateUploadUrlResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function generateUploadUrl(GenerateUploadUrlRequest $request, array $optionalArgs = []): GenerateUploadUrlResponse
    {
        return $this->startApiCall('GenerateUploadUrl', $request, $optionalArgs)->wait();
    }

    /**
     * Returns a function with the given name from the requested project.
     *
     * The async variant is {@see self::getFunctionAsync()} .
     *
     * @param GetFunctionRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CloudFunction
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getFunction(GetFunctionRequest $request, array $optionalArgs = []): CloudFunction
    {
        return $this->startApiCall('GetFunction', $request, $optionalArgs)->wait();
    }

    /**
     * Gets the IAM access control policy for a function.
     * Returns an empty policy if the function exists and does not have a policy
     * set.
     *
     * The async variant is {@see self::getIamPolicyAsync()} .
     *
     * @param GetIamPolicyRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getIamPolicy(GetIamPolicyRequest $request, array $optionalArgs = []): Policy
    {
        return $this->startApiCall('GetIamPolicy', $request, $optionalArgs)->wait();
    }

    /**
     * Returns a list of functions that belong to the requested project.
     *
     * The async variant is {@see self::listFunctionsAsync()} .
     *
     * @param ListFunctionsRequest $request      A request to house fields associated with the call.
     * @param array                $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listFunctions(ListFunctionsRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListFunctions', $request, $optionalArgs);
    }

    /**
     * Sets the IAM access control policy on the specified function.
     * Replaces any existing policy.
     *
     * The async variant is {@see self::setIamPolicyAsync()} .
     *
     * @param SetIamPolicyRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Policy
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function setIamPolicy(SetIamPolicyRequest $request, array $optionalArgs = []): Policy
    {
        return $this->startApiCall('SetIamPolicy', $request, $optionalArgs)->wait();
    }

    /**
     * Tests the specified permissions against the IAM access control policy
     * for a function.
     * If the function does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * The async variant is {@see self::testIamPermissionsAsync()} .
     *
     * @param TestIamPermissionsRequest $request      A request to house fields associated with the call.
     * @param array                     $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return TestIamPermissionsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function testIamPermissions(TestIamPermissionsRequest $request, array $optionalArgs = []): TestIamPermissionsResponse
    {
        return $this->startApiCall('TestIamPermissions', $request, $optionalArgs)->wait();
    }

    /**
     * Updates existing function.
     *
     * The async variant is {@see self::updateFunctionAsync()} .
     *
     * @param UpdateFunctionRequest $request      A request to house fields associated with the call.
     * @param array                 $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateFunction(UpdateFunctionRequest $request, array $optionalArgs = []): OperationResponse
    {
        return $this->startApiCall('UpdateFunction', $request, $optionalArgs)->wait();
    }
}
