<?php
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/logging/v2/logging_config.proto
 * Updates to the above are reflected here through a refresh process.
 */

namespace Google\Cloud\Logging\V2\Client\BaseClient;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Cloud\Logging\V2\CmekSettings;
use Google\Cloud\Logging\V2\CreateBucketRequest;
use Google\Cloud\Logging\V2\CreateExclusionRequest;
use Google\Cloud\Logging\V2\CreateSinkRequest;
use Google\Cloud\Logging\V2\CreateViewRequest;
use Google\Cloud\Logging\V2\DeleteBucketRequest;
use Google\Cloud\Logging\V2\DeleteExclusionRequest;
use Google\Cloud\Logging\V2\DeleteSinkRequest;
use Google\Cloud\Logging\V2\DeleteViewRequest;
use Google\Cloud\Logging\V2\GetBucketRequest;
use Google\Cloud\Logging\V2\GetCmekSettingsRequest;
use Google\Cloud\Logging\V2\GetExclusionRequest;
use Google\Cloud\Logging\V2\GetSinkRequest;
use Google\Cloud\Logging\V2\GetViewRequest;
use Google\Cloud\Logging\V2\ListBucketsRequest;
use Google\Cloud\Logging\V2\ListExclusionsRequest;
use Google\Cloud\Logging\V2\ListSinksRequest;
use Google\Cloud\Logging\V2\ListViewsRequest;
use Google\Cloud\Logging\V2\LogBucket;
use Google\Cloud\Logging\V2\LogExclusion;
use Google\Cloud\Logging\V2\LogSink;
use Google\Cloud\Logging\V2\LogView;
use Google\Cloud\Logging\V2\UndeleteBucketRequest;
use Google\Cloud\Logging\V2\UpdateBucketRequest;
use Google\Cloud\Logging\V2\UpdateCmekSettingsRequest;
use Google\Cloud\Logging\V2\UpdateExclusionRequest;
use Google\Cloud\Logging\V2\UpdateSinkRequest;
use Google\Cloud\Logging\V2\UpdateViewRequest;
use GuzzleHttp\Promise\PromiseInterface;

/**
 * Service Description: Service for configuring sinks used to route log entries.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * This class is currently experimental and may be subject to changes.
 *
 * @experimental
 *
 * @internal
 *
 * @method PromiseInterface createBucketAsync(CreateBucketRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createExclusionAsync(CreateExclusionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createSinkAsync(CreateSinkRequest $request, array $optionalArgs = [])
 * @method PromiseInterface createViewAsync(CreateViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteBucketAsync(DeleteBucketRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteExclusionAsync(DeleteExclusionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteSinkAsync(DeleteSinkRequest $request, array $optionalArgs = [])
 * @method PromiseInterface deleteViewAsync(DeleteViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getBucketAsync(GetBucketRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getCmekSettingsAsync(GetCmekSettingsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getExclusionAsync(GetExclusionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getSinkAsync(GetSinkRequest $request, array $optionalArgs = [])
 * @method PromiseInterface getViewAsync(GetViewRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listBucketsAsync(ListBucketsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listExclusionsAsync(ListExclusionsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listSinksAsync(ListSinksRequest $request, array $optionalArgs = [])
 * @method PromiseInterface listViewsAsync(ListViewsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface undeleteBucketAsync(UndeleteBucketRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateBucketAsync(UpdateBucketRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateCmekSettingsAsync(UpdateCmekSettingsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateExclusionAsync(UpdateExclusionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateSinkAsync(UpdateSinkRequest $request, array $optionalArgs = [])
 * @method PromiseInterface updateViewAsync(UpdateViewRequest $request, array $optionalArgs = [])
 */
class ConfigServiceV2BaseClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    const SERVICE_NAME = 'google.logging.v2.ConfigServiceV2';

    /** The default address of the service. */
    const SERVICE_ADDRESS = 'logging.googleapis.com';

    /** The default port of the service. */
    const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        'https://www.googleapis.com/auth/logging.admin',
        'https://www.googleapis.com/auth/logging.read',
    ];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../../resources/config_service_v2_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../../resources/config_service_v2_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../../resources/config_service_v2_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../../resources/config_service_v2_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account resource.
     *
     * @param string $billingAccount
     *
     * @return string The formatted billing_account resource.
     */
    public static function billingAccountName($billingAccount)
    {
        return self::getPathTemplate('billingAccount')->render([
            'billing_account' => $billingAccount,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_cmekSettings resource.
     *
     * @param string $billingAccount
     *
     * @return string The formatted billing_account_cmekSettings resource.
     */
    public static function billingAccountCmekSettingsName($billingAccount)
    {
        return self::getPathTemplate('billingAccountCmekSettings')->render([
            'billing_account' => $billingAccount,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_exclusion resource.
     *
     * @param string $billingAccount
     * @param string $exclusion
     *
     * @return string The formatted billing_account_exclusion resource.
     */
    public static function billingAccountExclusionName($billingAccount, $exclusion)
    {
        return self::getPathTemplate('billingAccountExclusion')->render([
            'billing_account' => $billingAccount,
            'exclusion' => $exclusion,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_location resource.
     *
     * @param string $billingAccount
     * @param string $location
     *
     * @return string The formatted billing_account_location resource.
     */
    public static function billingAccountLocationName($billingAccount, $location)
    {
        return self::getPathTemplate('billingAccountLocation')->render([
            'billing_account' => $billingAccount,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_location_bucket resource.
     *
     * @param string $billingAccount
     * @param string $location
     * @param string $bucket
     *
     * @return string The formatted billing_account_location_bucket resource.
     */
    public static function billingAccountLocationBucketName($billingAccount, $location, $bucket)
    {
        return self::getPathTemplate('billingAccountLocationBucket')->render([
            'billing_account' => $billingAccount,
            'location' => $location,
            'bucket' => $bucket,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_location_bucket_view resource.
     *
     * @param string $billingAccount
     * @param string $location
     * @param string $bucket
     * @param string $view
     *
     * @return string The formatted billing_account_location_bucket_view resource.
     */
    public static function billingAccountLocationBucketViewName($billingAccount, $location, $bucket, $view)
    {
        return self::getPathTemplate('billingAccountLocationBucketView')->render([
            'billing_account' => $billingAccount,
            'location' => $location,
            'bucket' => $bucket,
            'view' => $view,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * billing_account_sink resource.
     *
     * @param string $billingAccount
     * @param string $sink
     *
     * @return string The formatted billing_account_sink resource.
     */
    public static function billingAccountSinkName($billingAccount, $sink)
    {
        return self::getPathTemplate('billingAccountSink')->render([
            'billing_account' => $billingAccount,
            'sink' => $sink,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * cmek_settings resource.
     *
     * @param string $project
     *
     * @return string The formatted cmek_settings resource.
     */
    public static function cmekSettingsName($project)
    {
        return self::getPathTemplate('cmekSettings')->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a folder
     * resource.
     *
     * @param string $folder
     *
     * @return string The formatted folder resource.
     */
    public static function folderName($folder)
    {
        return self::getPathTemplate('folder')->render([
            'folder' => $folder,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_cmekSettings resource.
     *
     * @param string $folder
     *
     * @return string The formatted folder_cmekSettings resource.
     */
    public static function folderCmekSettingsName($folder)
    {
        return self::getPathTemplate('folderCmekSettings')->render([
            'folder' => $folder,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_exclusion resource.
     *
     * @param string $folder
     * @param string $exclusion
     *
     * @return string The formatted folder_exclusion resource.
     */
    public static function folderExclusionName($folder, $exclusion)
    {
        return self::getPathTemplate('folderExclusion')->render([
            'folder' => $folder,
            'exclusion' => $exclusion,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_location resource.
     *
     * @param string $folder
     * @param string $location
     *
     * @return string The formatted folder_location resource.
     */
    public static function folderLocationName($folder, $location)
    {
        return self::getPathTemplate('folderLocation')->render([
            'folder' => $folder,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_location_bucket resource.
     *
     * @param string $folder
     * @param string $location
     * @param string $bucket
     *
     * @return string The formatted folder_location_bucket resource.
     */
    public static function folderLocationBucketName($folder, $location, $bucket)
    {
        return self::getPathTemplate('folderLocationBucket')->render([
            'folder' => $folder,
            'location' => $location,
            'bucket' => $bucket,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * folder_location_bucket_view resource.
     *
     * @param string $folder
     * @param string $location
     * @param string $bucket
     * @param string $view
     *
     * @return string The formatted folder_location_bucket_view resource.
     */
    public static function folderLocationBucketViewName($folder, $location, $bucket, $view)
    {
        return self::getPathTemplate('folderLocationBucketView')->render([
            'folder' => $folder,
            'location' => $location,
            'bucket' => $bucket,
            'view' => $view,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a folder_sink
     * resource.
     *
     * @param string $folder
     * @param string $sink
     *
     * @return string The formatted folder_sink resource.
     */
    public static function folderSinkName($folder, $sink)
    {
        return self::getPathTemplate('folderSink')->render([
            'folder' => $folder,
            'sink' => $sink,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a location
     * resource.
     *
     * @param string $project
     * @param string $location
     *
     * @return string The formatted location resource.
     */
    public static function locationName($project, $location)
    {
        return self::getPathTemplate('location')->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a log_bucket
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $bucket
     *
     * @return string The formatted log_bucket resource.
     */
    public static function logBucketName($project, $location, $bucket)
    {
        return self::getPathTemplate('logBucket')->render([
            'project' => $project,
            'location' => $location,
            'bucket' => $bucket,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * log_exclusion resource.
     *
     * @param string $project
     * @param string $exclusion
     *
     * @return string The formatted log_exclusion resource.
     */
    public static function logExclusionName($project, $exclusion)
    {
        return self::getPathTemplate('logExclusion')->render([
            'project' => $project,
            'exclusion' => $exclusion,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a log_sink
     * resource.
     *
     * @param string $project
     * @param string $sink
     *
     * @return string The formatted log_sink resource.
     */
    public static function logSinkName($project, $sink)
    {
        return self::getPathTemplate('logSink')->render([
            'project' => $project,
            'sink' => $sink,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a log_view
     * resource.
     *
     * @param string $project
     * @param string $location
     * @param string $bucket
     * @param string $view
     *
     * @return string The formatted log_view resource.
     */
    public static function logViewName($project, $location, $bucket, $view)
    {
        return self::getPathTemplate('logView')->render([
            'project' => $project,
            'location' => $location,
            'bucket' => $bucket,
            'view' => $view,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a organization
     * resource.
     *
     * @param string $organization
     *
     * @return string The formatted organization resource.
     */
    public static function organizationName($organization)
    {
        return self::getPathTemplate('organization')->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_cmekSettings resource.
     *
     * @param string $organization
     *
     * @return string The formatted organization_cmekSettings resource.
     */
    public static function organizationCmekSettingsName($organization)
    {
        return self::getPathTemplate('organizationCmekSettings')->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_exclusion resource.
     *
     * @param string $organization
     * @param string $exclusion
     *
     * @return string The formatted organization_exclusion resource.
     */
    public static function organizationExclusionName($organization, $exclusion)
    {
        return self::getPathTemplate('organizationExclusion')->render([
            'organization' => $organization,
            'exclusion' => $exclusion,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_location resource.
     *
     * @param string $organization
     * @param string $location
     *
     * @return string The formatted organization_location resource.
     */
    public static function organizationLocationName($organization, $location)
    {
        return self::getPathTemplate('organizationLocation')->render([
            'organization' => $organization,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_location_bucket resource.
     *
     * @param string $organization
     * @param string $location
     * @param string $bucket
     *
     * @return string The formatted organization_location_bucket resource.
     */
    public static function organizationLocationBucketName($organization, $location, $bucket)
    {
        return self::getPathTemplate('organizationLocationBucket')->render([
            'organization' => $organization,
            'location' => $location,
            'bucket' => $bucket,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_location_bucket_view resource.
     *
     * @param string $organization
     * @param string $location
     * @param string $bucket
     * @param string $view
     *
     * @return string The formatted organization_location_bucket_view resource.
     */
    public static function organizationLocationBucketViewName($organization, $location, $bucket, $view)
    {
        return self::getPathTemplate('organizationLocationBucketView')->render([
            'organization' => $organization,
            'location' => $location,
            'bucket' => $bucket,
            'view' => $view,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * organization_sink resource.
     *
     * @param string $organization
     * @param string $sink
     *
     * @return string The formatted organization_sink resource.
     */
    public static function organizationSinkName($organization, $sink)
    {
        return self::getPathTemplate('organizationSink')->render([
            'organization' => $organization,
            'sink' => $sink,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project
     * resource.
     *
     * @param string $project
     *
     * @return string The formatted project resource.
     */
    public static function projectName($project)
    {
        return self::getPathTemplate('project')->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_cmekSettings resource.
     *
     * @param string $project
     *
     * @return string The formatted project_cmekSettings resource.
     */
    public static function projectCmekSettingsName($project)
    {
        return self::getPathTemplate('projectCmekSettings')->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_exclusion resource.
     *
     * @param string $project
     * @param string $exclusion
     *
     * @return string The formatted project_exclusion resource.
     */
    public static function projectExclusionName($project, $exclusion)
    {
        return self::getPathTemplate('projectExclusion')->render([
            'project' => $project,
            'exclusion' => $exclusion,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_location_bucket resource.
     *
     * @param string $project
     * @param string $location
     * @param string $bucket
     *
     * @return string The formatted project_location_bucket resource.
     */
    public static function projectLocationBucketName($project, $location, $bucket)
    {
        return self::getPathTemplate('projectLocationBucket')->render([
            'project' => $project,
            'location' => $location,
            'bucket' => $bucket,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * project_location_bucket_view resource.
     *
     * @param string $project
     * @param string $location
     * @param string $bucket
     * @param string $view
     *
     * @return string The formatted project_location_bucket_view resource.
     */
    public static function projectLocationBucketViewName($project, $location, $bucket, $view)
    {
        return self::getPathTemplate('projectLocationBucketView')->render([
            'project' => $project,
            'location' => $location,
            'bucket' => $bucket,
            'view' => $view,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a project_sink
     * resource.
     *
     * @param string $project
     * @param string $sink
     *
     * @return string The formatted project_sink resource.
     */
    public static function projectSinkName($project, $sink)
    {
        return self::getPathTemplate('projectSink')->render([
            'project' => $project,
            'sink' => $sink,
        ]);
    }

    private static function registerPathTemplates()
    {
        self::loadPathTemplates(__DIR__ . '/../../resources/config_service_v2_descriptor_config.php', self::SERVICE_NAME);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - billingAccount: billingAccounts/{billing_account}
     * - billingAccountCmekSettings: billingAccounts/{billing_account}/cmekSettings
     * - billingAccountExclusion: billingAccounts/{billing_account}/exclusions/{exclusion}
     * - billingAccountLocation: billingAccounts/{billing_account}/locations/{location}
     * - billingAccountLocationBucket: billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}
     * - billingAccountLocationBucketView: billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}/views/{view}
     * - billingAccountSink: billingAccounts/{billing_account}/sinks/{sink}
     * - cmekSettings: projects/{project}/cmekSettings
     * - folder: folders/{folder}
     * - folderCmekSettings: folders/{folder}/cmekSettings
     * - folderExclusion: folders/{folder}/exclusions/{exclusion}
     * - folderLocation: folders/{folder}/locations/{location}
     * - folderLocationBucket: folders/{folder}/locations/{location}/buckets/{bucket}
     * - folderLocationBucketView: folders/{folder}/locations/{location}/buckets/{bucket}/views/{view}
     * - folderSink: folders/{folder}/sinks/{sink}
     * - location: projects/{project}/locations/{location}
     * - logBucket: projects/{project}/locations/{location}/buckets/{bucket}
     * - logExclusion: projects/{project}/exclusions/{exclusion}
     * - logSink: projects/{project}/sinks/{sink}
     * - logView: projects/{project}/locations/{location}/buckets/{bucket}/views/{view}
     * - organization: organizations/{organization}
     * - organizationCmekSettings: organizations/{organization}/cmekSettings
     * - organizationExclusion: organizations/{organization}/exclusions/{exclusion}
     * - organizationLocation: organizations/{organization}/locations/{location}
     * - organizationLocationBucket: organizations/{organization}/locations/{location}/buckets/{bucket}
     * - organizationLocationBucketView: organizations/{organization}/locations/{location}/buckets/{bucket}/views/{view}
     * - organizationSink: organizations/{organization}/sinks/{sink}
     * - project: projects/{project}
     * - projectCmekSettings: projects/{project}/cmekSettings
     * - projectExclusion: projects/{project}/exclusions/{exclusion}
     * - projectLocationBucket: projects/{project}/locations/{location}/buckets/{bucket}
     * - projectLocationBucketView: projects/{project}/locations/{location}/buckets/{bucket}/views/{view}
     * - projectSink: projects/{project}/sinks/{sink}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     */
    public static function parseName($formattedName, $template = null)
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'logging.googleapis.com:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     * }
     *
     * @throws ValidationException
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a bucket that can be used to store log entries. Once a bucket has
     * been created, the region cannot be changed.
     *
     * The async variant is {@see self::createBucketAsync()} .
     *
     * @param CreateBucketRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogBucket
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createBucket(CreateBucketRequest $request, array $optionalArgs = []): LogBucket
    {
        return $this->startApiCall('CreateBucket', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a new exclusion in a specified parent resource.
     * Only log entries belonging to that resource can be excluded.
     * You can have up to 10 exclusions in a resource.
     *
     * The async variant is {@see self::createExclusionAsync()} .
     *
     * @param CreateExclusionRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogExclusion
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createExclusion(CreateExclusionRequest $request, array $optionalArgs = []): LogExclusion
    {
        return $this->startApiCall('CreateExclusion', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a sink that exports specified log entries to a destination. The
     * export of newly-ingested log entries begins immediately, unless the sink's
     * `writer_identity` is not permitted to write to the destination. A sink can
     * export log entries only from the resource owning the sink.
     *
     * The async variant is {@see self::createSinkAsync()} .
     *
     * @param CreateSinkRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogSink
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createSink(CreateSinkRequest $request, array $optionalArgs = []): LogSink
    {
        return $this->startApiCall('CreateSink', $request, $optionalArgs)->wait();
    }

    /**
     * Creates a view over logs in a bucket. A bucket may contain a maximum of
     * 50 views.
     *
     * The async variant is {@see self::createViewAsync()} .
     *
     * @param CreateViewRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogView
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function createView(CreateViewRequest $request, array $optionalArgs = []): LogView
    {
        return $this->startApiCall('CreateView', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a bucket.
     * Moves the bucket to the DELETE_REQUESTED state. After 7 days, the
     * bucket will be purged and all logs in the bucket will be permanently
     * deleted.
     *
     * The async variant is {@see self::deleteBucketAsync()} .
     *
     * @param DeleteBucketRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteBucket(DeleteBucketRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteBucket', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes an exclusion.
     *
     * The async variant is {@see self::deleteExclusionAsync()} .
     *
     * @param DeleteExclusionRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteExclusion(DeleteExclusionRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteExclusion', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a sink. If the sink has a unique `writer_identity`, then that
     * service account is also deleted.
     *
     * The async variant is {@see self::deleteSinkAsync()} .
     *
     * @param DeleteSinkRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteSink(DeleteSinkRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteSink', $request, $optionalArgs)->wait();
    }

    /**
     * Deletes a view from a bucket.
     *
     * The async variant is {@see self::deleteViewAsync()} .
     *
     * @param DeleteViewRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function deleteView(DeleteViewRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('DeleteView', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a bucket.
     *
     * The async variant is {@see self::getBucketAsync()} .
     *
     * @param GetBucketRequest $request      A request to house fields associated with the call.
     * @param array            $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogBucket
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getBucket(GetBucketRequest $request, array $optionalArgs = []): LogBucket
    {
        return $this->startApiCall('GetBucket', $request, $optionalArgs)->wait();
    }

    /**
     * Gets the Logs Router CMEK settings for the given resource.
     *
     * Note: CMEK for the Logs Router can currently only be configured for GCP
     * organizations. Once configured, it applies to all projects and folders in
     * the GCP organization.
     *
     * See [Enabling CMEK for Logs
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     *
     * The async variant is {@see self::getCmekSettingsAsync()} .
     *
     * @param GetCmekSettingsRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CmekSettings
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getCmekSettings(GetCmekSettingsRequest $request, array $optionalArgs = []): CmekSettings
    {
        return $this->startApiCall('GetCmekSettings', $request, $optionalArgs)->wait();
    }

    /**
     * Gets the description of an exclusion.
     *
     * The async variant is {@see self::getExclusionAsync()} .
     *
     * @param GetExclusionRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogExclusion
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getExclusion(GetExclusionRequest $request, array $optionalArgs = []): LogExclusion
    {
        return $this->startApiCall('GetExclusion', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a sink.
     *
     * The async variant is {@see self::getSinkAsync()} .
     *
     * @param GetSinkRequest $request      A request to house fields associated with the call.
     * @param array          $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogSink
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getSink(GetSinkRequest $request, array $optionalArgs = []): LogSink
    {
        return $this->startApiCall('GetSink', $request, $optionalArgs)->wait();
    }

    /**
     * Gets a view.
     *
     * The async variant is {@see self::getViewAsync()} .
     *
     * @param GetViewRequest $request      A request to house fields associated with the call.
     * @param array          $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogView
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function getView(GetViewRequest $request, array $optionalArgs = []): LogView
    {
        return $this->startApiCall('GetView', $request, $optionalArgs)->wait();
    }

    /**
     * Lists buckets.
     *
     * The async variant is {@see self::listBucketsAsync()} .
     *
     * @param ListBucketsRequest $request      A request to house fields associated with the call.
     * @param array              $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listBuckets(ListBucketsRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListBuckets', $request, $optionalArgs);
    }

    /**
     * Lists all the exclusions in a parent resource.
     *
     * The async variant is {@see self::listExclusionsAsync()} .
     *
     * @param ListExclusionsRequest $request      A request to house fields associated with the call.
     * @param array                 $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listExclusions(ListExclusionsRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListExclusions', $request, $optionalArgs);
    }

    /**
     * Lists sinks.
     *
     * The async variant is {@see self::listSinksAsync()} .
     *
     * @param ListSinksRequest $request      A request to house fields associated with the call.
     * @param array            $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listSinks(ListSinksRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListSinks', $request, $optionalArgs);
    }

    /**
     * Lists views on a bucket.
     *
     * The async variant is {@see self::listViewsAsync()} .
     *
     * @param ListViewsRequest $request      A request to house fields associated with the call.
     * @param array            $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function listViews(ListViewsRequest $request, array $optionalArgs = []): PagedListResponse
    {
        return $this->startApiCall('ListViews', $request, $optionalArgs);
    }

    /**
     * Undeletes a bucket. A bucket that has been deleted may be undeleted within
     * the grace period of 7 days.
     *
     * The async variant is {@see self::undeleteBucketAsync()} .
     *
     * @param UndeleteBucketRequest $request      A request to house fields associated with the call.
     * @param array                 $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function undeleteBucket(UndeleteBucketRequest $request, array $optionalArgs = []): void
    {
        $this->startApiCall('UndeleteBucket', $request, $optionalArgs)->wait();
    }

    /**
     * Updates a bucket. This method replaces the following fields in the
     * existing bucket with values from the new bucket: `retention_period`
     *
     * If the retention period is decreased and the bucket is locked,
     * FAILED_PRECONDITION will be returned.
     *
     * If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION
     * will be returned.
     *
     * A buckets region may not be modified after it is created.
     *
     * The async variant is {@see self::updateBucketAsync()} .
     *
     * @param UpdateBucketRequest $request      A request to house fields associated with the call.
     * @param array               $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogBucket
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateBucket(UpdateBucketRequest $request, array $optionalArgs = []): LogBucket
    {
        return $this->startApiCall('UpdateBucket', $request, $optionalArgs)->wait();
    }

    /**
     * Updates the Logs Router CMEK settings for the given resource.
     *
     * Note: CMEK for the Logs Router can currently only be configured for GCP
     * organizations. Once configured, it applies to all projects and folders in
     * the GCP organization.
     *
     * [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
     * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
     * account does not have the required
     * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
     * 3) access to the key is disabled.
     *
     * See [Enabling CMEK for Logs
     * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
     * for more information.
     *
     * The async variant is {@see self::updateCmekSettingsAsync()} .
     *
     * @param UpdateCmekSettingsRequest $request      A request to house fields associated with the call.
     * @param array                     $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return CmekSettings
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateCmekSettings(UpdateCmekSettingsRequest $request, array $optionalArgs = []): CmekSettings
    {
        return $this->startApiCall('UpdateCmekSettings', $request, $optionalArgs)->wait();
    }

    /**
     * Changes one or more properties of an existing exclusion.
     *
     * The async variant is {@see self::updateExclusionAsync()} .
     *
     * @param UpdateExclusionRequest $request      A request to house fields associated with the call.
     * @param array                  $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogExclusion
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateExclusion(UpdateExclusionRequest $request, array $optionalArgs = []): LogExclusion
    {
        return $this->startApiCall('UpdateExclusion', $request, $optionalArgs)->wait();
    }

    /**
     * Updates a sink. This method replaces the following fields in the existing
     * sink with values from the new sink: `destination`, and `filter`.
     *
     * The updated sink might also have a new `writer_identity`; see the
     * `unique_writer_identity` field.
     *
     * The async variant is {@see self::updateSinkAsync()} .
     *
     * @param UpdateSinkRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogSink
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateSink(UpdateSinkRequest $request, array $optionalArgs = []): LogSink
    {
        return $this->startApiCall('UpdateSink', $request, $optionalArgs)->wait();
    }

    /**
     * Updates a view. This method replaces the following fields in the existing
     * view with values from the new view: `filter`.
     *
     * The async variant is {@see self::updateViewAsync()} .
     *
     * @param UpdateViewRequest $request      A request to house fields associated with the call.
     * @param array             $optionalArgs {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return LogView
     *
     * @throws ApiException Thrown if the API call fails.
     */
    public function updateView(UpdateViewRequest $request, array $optionalArgs = []): LogView
    {
        return $this->startApiCall('UpdateView', $request, $optionalArgs)->wait();
    }
}
